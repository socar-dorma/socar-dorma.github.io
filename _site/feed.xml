<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-01-26T16:25:14+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">SOCAR Tech Blog</title><subtitle>쏘카 기술 블로그</subtitle><author><name>SOCAR</name></author><entry><title type="html">CES Show 2020 참가 후기</title><link href="http://localhost:4000/conference/2020/01/23/spock-ces2020.html" rel="alternate" type="text/html" title="CES Show 2020 참가 후기" /><published>2020-01-23T00:00:00+09:00</published><updated>2020-01-23T00:00:00+09:00</updated><id>http://localhost:4000/conference/2020/01/23/spock-ces2020</id><content type="html" xml:base="http://localhost:4000/conference/2020/01/23/spock-ces2020.html">&lt;p&gt;라스베거스에서 열린 CES 2020을 다녀온 후 작성한 후기입니다.
언제부터인가 CES에서 자동차업체가 등장하기 시작하더니, 이제는 자동차와 하나도 관계없어 보이는 업체들이 자동차를 전시하는 시대가 되었습니다.&lt;/p&gt;

&lt;p&gt;이번 CES에서는 자동차를 넘어 모빌리티를 새롭게 정의하려는 업체들의 시도가 돋보였던 전시회였던것 같습니다.
그럼 이번 CES Show에서 사람들의 이목을 끈 부스들을 사진과 함께 둘러보겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/01.jpg&quot; alt=&quot;&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;하늘에 비행기 구름을 드론으로 인쇄하는 CES의 위엄&lt;/del&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;진격의-아마존&quot;&gt;진격의 아마존&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/aws_5.jpg&quot; alt=&quot;&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이번 CES에서 느낀것은 모빌리티에서는 아마존이 매우 강세였다는 것입니다.&lt;/p&gt;

&lt;p&gt;아마존과 많은 부분에서 경쟁중인 구글의 경우, 행사장 외부에 단독 부스는 있었지만 구글 어시스턴트에만 집중하는 모습을 보여줬습니다.
아마존 알렉사와는 달리 구글은 모빌리티나 다른 디바이스에 탑재되어 작동하는 데모를 찾지 못하였습니다.&lt;/p&gt;

&lt;p&gt;이번에 AWS는 부스에 차량까지 전시했는데 사람들의 관심이 글자그대로 쏟아져 내렸습니다. &lt;del&gt;부스좀 넓게잡지&lt;/del&gt; &lt;del&gt;상습정체구간 유발&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/aws_4.jpg&quot; alt=&quot;&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아마존에서 차를 직접 만든것은 아니고, RIVIAN(https://rivian.com/) 이라는 EV 차량제조사의 차를 가지고 나왔는데, 전장 시스템의 많은 부분이 AWS를 이용하는 차여서 전시된듯 하더군요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/aws_3.jpg&quot; alt=&quot;&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이외에도 아마존은 자신들의 시스템을 이용한 많은 프로젝트를 전시하고 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/aws_1.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;img src=&quot;/img/spock-ces2020/aws_2.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그중에 재미있는것은, 운전자의 얼굴을 인식해 차량의 설정을 해당 운전자에게 맞춰주는 것이 있었습니다.
차후 쏘카에서도 이런 서비스가 가능하면 좋겠다는 생각이 들더군요.&lt;/p&gt;

&lt;p&gt;이번 CES에서 진격의 아마존이라는 것을 느끼게 된 이유가 있습니다.
&lt;img src=&quot;/img/spock-ces2020/cam_alexa.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이것은 NEXTBASE(https://www.nextbase.com/en-us/)라는 곳에서 만든 차량용 블랙박스(대시캠)인데요, 아마존 알렉사를 내장해서 녹화시작/정지나 사진찍기등의 제어를 처리할수 있었습니다.&lt;/p&gt;

&lt;p&gt;그외에도 많은 디바이스들이 알렉사를 내장하고 있다는것을 홍보하고 있었습니다.&lt;/p&gt;

&lt;p&gt;선제를 빼앗긴 구글의 다음행보가 기대되네요. &lt;del&gt;내년 CES에서는 그러지 마라&lt;/del&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;차말고-다른걸-보여주고-싶은-차량제조사-vs-이왕-만드는거-차도-만드는-전장제조사&quot;&gt;차말고 다른걸 보여주고 싶은 차량제조사 vs 이왕 만드는거 차도 만드는 전장제조사&lt;/h3&gt;

&lt;p&gt;기본적으로 가전전시회인 CES에 차량제조사들이 참가하고 있지만, CES에서 이들이 보이는 모습은 차량제조사 보다는 모빌리티의 새로운 컨셉제시에 가까왔습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/hyundai_uber_dron.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그런 대표적인 부스가 드론버스를 우버와 함께 전시한 현대인데요, 한쪽에서 이것을 타면 어떤느낌일지 출발부터 도착까지의 VR체험도 할수 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/ford_2.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;img src=&quot;/img/spock-ces2020/ford_3.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;img src=&quot;/img/spock-ces2020/ford_1.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;물론 차량 제조사들이 차를 아예 안들고 나온것은 아닙니다. 포드의 경우엔 자신들이 이제 내연기관 차량보다는 전기차와 스마트카에 집중할 것을 선포라도 하는듯한 부스 구성이었는데요. &lt;del&gt;전기차 충전기가 뭔가 익숙하게 생긴건 일단 넘어가고&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/ford_robot.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;형이 거기서 왜나와&lt;/del&gt; 라이다를 로봇의 비전인식 시스템으로 사용한 로봇을 데모 시연하고 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/ev_byton.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;img src=&quot;/img/spock-ces2020/ev_fiat_concept2.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;img src=&quot;/img/spock-ces2020/ev_toyota_concept2.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그외에 차량 제조사들은 전기차를 기반으로 하지만 새로워진 차량의 전장 구성이나 승객편의성에 주력한 컨셉 차량들을 많이 보여주었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/ev_rubicon.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;그런데 전기차 지프라니 대체 세상이 어찌되려고(?)&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/toyota_busco_3.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/ev_ze.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그외에도 다른 차량 제조사들은 승객 편의성을 강조한 컨셉카나 시스템을 보여주는데 주력하였습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/toyota_busco_4.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;img src=&quot;/img/spock-ces2020/toyota_busco_5.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Toyota Boshoku의 경우 도요타 그룹에 속한 자동차 부품 제조업체인데, 운전자와 승객의 편의성을 중시한 설계를 소개하는 컨셉 데모를 시연하고 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/ev_sony_1.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;img src=&quot;/img/spock-ces2020/ev_sony_2.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그래도 이번 CES에서 사람들을 놀라게 한것은 &lt;del&gt;깜박이도 안켜고 갑툭튀&lt;/del&gt; 전기차를 내놓은 소니였습니다.
소니가 실제로 이 차량을 내놓을지는 모르겠지만, 테슬라와 많은 비교가 되지 않을까 싶더군요.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;뭘하든-전기차--안전한-차&quot;&gt;뭘하든 전기차 + 안전한 차&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/ev_base.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;img src=&quot;/img/spock-ces2020/ev_bosch_1.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;img src=&quot;/img/spock-ces2020/ev_charger.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;가전 전시회라 그럴수도 있겠지만, 전시된 모든 차들이 전기차였습니다. 그리고 전기차 베이스도 정말 많이 찾아볼수 있었구요.
어쩌면 미래의 전기차는 지금의 차량 제조사들이 만드는게 아니라 기술력은 있지만 한번도 차를 만들어보지 않은 회사들이 전기차 베이스 위에 자신들의 할수 있는것을 만들어 쌓는 방식이 될지도 모르겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/hyundai_1.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;img src=&quot;/img/spock-ces2020/ev_bosch_2.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;img src=&quot;/img/spock-ces2020/ev_bus_toyota.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;img src=&quot;/img/spock-ces2020/ev_car_lg.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;그결과 생긴게 다 거기서 거기&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;하지만 어떻게 생기고 무엇으로 굴러가든 미래의 차는 분명 지금의 차보다는 안전한 차가 될것입니다.
가령 라이다의 경우 자율주행에 쓰이든 안쓰이든 보편적으로 탑재되지 않을까 하는 생각이 들더군요.
이번 CES에서 라이다 업체만 무려 500개가 참가했다고 합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/lidar_kysera.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;교세라의 경우 라이다와 영상을 결합시킨 제품을 선보였습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/ouster_ridar.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OUSTER는 아예 라이다로 부스 주변을 전부 스캔하는 데모를 시연하고 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/ouster_car.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;심지어는 차에 장착해서 가격표까지(…) 붙여놨더군요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/adas_mobileye.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;
&lt;img src=&quot;/img/spock-ces2020/adas_mobileye_1.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ADAS로 유명한 모빌아이의 경우에도 이제는 전방감시를 넘어 그 데이터를 활용하는 방법을 연구중이었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/pscr_2.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;공공 연구기관의 연구도 지속적으로 이루어지고 있음을 확인할수 있었습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;미래의-차는-잠깐-휴업중&quot;&gt;미래의 차는 잠깐 휴업중&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/mobilty_semina.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3일간의 일정중 모빌리티 관련 세미나에 참석할 기회가 있을때마다 &lt;del&gt;영어가 좀 부족하지만&lt;/del&gt; 최대한 참석해 보았습니다.
위 사진은 그중 “What’s Next for Vehicle Automation”이라는 세션에 참석한 사진인데요, 진행자가 “몆년정도 지나야 우리가 미래의 차가 등장할 것이라고 예상하나”라고 질문하는데 모든 참석자가 답변을 회피하더군요.&lt;/p&gt;

&lt;p&gt;참가한 대단히 많은 업체들이 자율주행을 이야기 하고 있었습니다만, 실제로 자율주행의 가능성에 있어서는 상당히 회의적인 이야기가 나오고 있었습니다. 현실세계가 그들이 생각했던거 이상으로 복잡하다고 그러더군요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/blackberry_car_2.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다만 제가 보면서 느끼기엔 약간 숨고르기 느낌이 강했습니다.
이전까지는 ‘어떻게든 해보면 되겠지’라는 느낌이었다면 지금은 뭐가 부족하고 뭐를 채워야 할지 알게된 느낌이랄까요.
데이터를 수집하기 위한 차를 만들고 그 차를 “저고도 인공위성”이라고까지 부릅니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;한국의-위치는-어디쯤일까&quot;&gt;한국의 위치는 어디쯤일까&lt;/h3&gt;

&lt;p&gt;그렇다면 우리 한국의 위치는 어디쯤일까요.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/cube_ai.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우리의 시도는 아직 제한적입니다. 자율주행을 연구하고는 있지만, 일단은 자율주차부터 시도해보려 하고 있죠.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/thinkware.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ADAS에도 도전하고 있지만 데이터를 활용하는 것에 있어서는 아직 갈길이 멉니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/parking_cloud.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;새로운 기술을 개발하기 보다는 보편화된 기술을 이용한 비즈니스 모델을 만들고 실현화시키는데는 확실히 빠릅니다.
&lt;del&gt;차가 굉장히 익숙해 보이는건 기분탓&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/spock-ces2020/phantom_drive.jpg&quot; alt=&quot;&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;하지만 우리가 부족하다고 생각하진 않습니다. 이 사진은 팬텀드라이브라는, 한국인 엔지니어들이 미국에서 창업한 자율주행 제품을 탑재한 제네시스입니다. 실제로 탑승해서 도로주행까지 체험해 봤는데, 사람이 운전하다가 기계로 운전 주체가 바뀌었음에도 눈치채지 못할정도로 훌륭했었습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;p&gt;올해 CES는 모빌리티 기준에서는 숨고르기 느낌이 강했다는 생각입니다. 새로운 컨셉을 보여주기엔 뭔가 부족했고, 패러다임 시프트를 보여주기엔 이미 다 알고 있는 내용들이었으며, 몇몇 업체들이 돋보였지만 이에 대항할 카운터가 없다보니 쓸쓸해보이는 원맨쇼 수준이 아니었나 합니다.
하지만 몇년전만해도 비싼 비용을 자랑하던 기술이 보편적인 기술이 되었고, HD맵같은 정교화와 온라인 서비스와의 결합이라는 새로운 시도들도 매우 빠른 시간에 보편화 되어지고 있었습니다.
아마 내년, 내후년의 CES는 또 다를겁니다. 그리고 그만큼 우리의 모빌리티도 많이 달라지겠죠.
거기에도 반드시 쏘카가 있을것입니다.&lt;/p&gt;</content><author><name>spock</name></author><category term="conference" /><category term="ces" /><summary type="html">라스베거스에서 열린 CES 2020을 다녀온 후 작성한 후기입니다. 언제부터인가 CES에서 자동차업체가 등장하기 시작하더니, 이제는 자동차와 하나도 관계없어 보이는 업체들이 자동차를 전시하는 시대가 되었습니다.</summary></entry><entry><title type="html">O’reilly Strata Data Conference New York 2019 후기</title><link href="http://localhost:4000/data/2020/01/13/oreilly-strata-newyork-2019-review.html" rel="alternate" type="text/html" title="O'reilly Strata Data Conference New York 2019 후기" /><published>2020-01-13T00:00:00+09:00</published><updated>2020-01-13T00:00:00+09:00</updated><id>http://localhost:4000/data/2020/01/13/oreilly-strata-newyork-2019-review</id><content type="html" xml:base="http://localhost:4000/data/2020/01/13/oreilly-strata-newyork-2019-review.html">&lt;p&gt;O’Reilly Strata Data Conference New York 2019 다녀온 후 작성한 후기입니다. 아래 내용을 다룹니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;스트라타 데이터 컨퍼런스 소개&lt;/li&gt;
  &lt;li&gt;유익한 세션 소개&lt;/li&gt;
  &lt;li&gt;참고 자료&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;사내 전파용으로 만든 행사 후기 슬라이드 자료를 &lt;a href=&quot;https://speakerdeck.com/socar/oreilly-strata-data-conference-new-york-2019-hugi&quot;&gt;SOCAR Speakerdeck&lt;/a&gt;에 업로드했습니다! 발표 자료엔 다음 내용이 있습니다. 관심있으신 분은 발표 자료를 참고하시면 좋을 것 같습니다 :)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;3개의 테마, 6개의 발표 정리
    &lt;ul&gt;
      &lt;li&gt;Optimization&lt;/li&gt;
      &lt;li&gt;Uber&lt;/li&gt;
      &lt;li&gt;Explainable AI&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;oreilly-strata-conference-소개&quot;&gt;O’Reilly Strata Conference 소개&lt;/h3&gt;
&lt;p&gt;O’reilly는 개발 관련된 책을 많이 만들고 있는 출판사로, 아마 개발 관련 책을 보셨다면 O’Reilly 마크를 보셨을 겁니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/1.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;출판사지만 동시에 컨퍼런스도 다양하게 열고 있습니다. 매년 다양한 장소에서 여러 테마로 컨퍼런스가 열리고 있습니다.&lt;/p&gt;

&lt;p&gt;2019년엔 Software Architecture, TensorFlow, AI, Data 등 다양하게 열렸습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/2.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;저희가 이번에 참여한 컨퍼런스는 Data Conference로 데이터에 관한 포괄적인 세션들이 많았습니다.&lt;/p&gt;

&lt;p&gt;이번 New York 행사장은 한국의 코엑스와 비슷한 장소였습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/4.png&quot; alt=&quot;&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;행사장 입장시 안내 데스크에 사람이 있는 한국과 달리, 신청자가 직접 기기를 통해 이름표를 직접 인쇄합니다. 등록한 메일로 QR Code가 전달되는데, 기기에서 QR Code를 입력하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/3.png&quot; alt=&quot;&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;행사장엔 세션 장소와 기업 부스로 나뉘어져 있었습니다.&lt;/p&gt;

&lt;p&gt;Anaconda 같은 기업 부스도 있었고, Google Cloud Platform 등이 있었습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/5.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;O’reilly 부스에선 컨퍼런스 참여자 전원에게 원하는 책 1권을 주고 있었습니다. Stream Processing with Apache Spark를 받았습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/6.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;신기한-광경&quot;&gt;신기한 광경&lt;/h3&gt;
&lt;p&gt;1) DJing
&lt;img src=&quot;/img/oreilly-strata-2019-review/7.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;행사장에 음악이 계속 나오고 있는데, DJ가 계셨습니다.&lt;/p&gt;

&lt;p&gt;2) 프로필 사진 촬영
&lt;img src=&quot;/img/oreilly-strata-2019-review/8.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;프로필 사진 찍어주는 공간도 있었습니다. 사람들이 줄서서 자신의 프로필 사진을 찍고 있었습니다.&lt;/p&gt;

&lt;p&gt;3) 세션 종료 후 파티
&lt;img src=&quot;/img/oreilly-strata-2019-review/9.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;세션이 끝난 후 기업 부스에서 파티 음식을 제공했습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;간단한 먹거리, 맥주, 아이스크림 등&lt;/li&gt;
  &lt;li&gt;개발자 행사에 곁들여진 파티의 모습을 볼 수 있었습니다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이런 부분을 통해 행사를 주최한 오라일리가 행사에 얼마나 신경쓰는지를 알 수 있었습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;session-소개&quot;&gt;Session 소개&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/10.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;다양한 발표 중 저희가 들은 세션 중 블로그 글에 정리한 것은 총 4개입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;how-machine-learning-meets-optimization&quot;&gt;How machine Learning meets optimization&lt;/h3&gt;

&lt;p&gt;최적화(Optimization)란 단어는 데이터 사이언스를 공부하다 보면 자주 접할 수 있는 단어입니다. 최적화는 다양한 방식으로 진행할 수 있는데, 산업 공학에선 Linear Programming(LP), Constraint Programming 등으로 문제를 풀 수 있습니다.&lt;/p&gt;

&lt;p&gt;발표자분은 Optimization과 머신러닝이 함께 필요한 문제의 예시로 Scheduling Problem과 Routing Problem을 예시로 들었습니다. 이 문제들은 저희가 속한 모빌리티 산업에서 많이 풀고있는 문제로, 제한된 리소스로 최대(혹은 최소)의 효과를 낼 수 있는 문제입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/11.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;최적화와 머신러닝을 활용하는 방법은 다음과 같습니다. 예측 모델링 후, 그 값을 토대로 최적화를 돌리고 시나리오를 선택합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/12.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;최적화와 머신러닝 모두 Input을 넣으면 Output이 나오는 점은 동일하나, 최적화는 입력 x에 대해 제약 조건과 objective value가 있어 optimal solution을 찾고 머신러닝은 레이블된 데이터가 존재하는 상태에서 Error를 최소화합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;ml-is-not-enough-decision-automation-in-the-real-world&quot;&gt;ML is not enough: Decision automation in the real world&lt;/h3&gt;

&lt;p&gt;이 세션은 위에서 말씀드린 “How machine Learning meets optimization” 같이 원론적인 내용을 다루기보다, 머신러닝과 최적화를 같이 사용한 실용적인 후기에 대한 발표입니다.&lt;/p&gt;

&lt;p&gt;대부분 현실의 의사 결정은 머신러닝 모델의 예측값만으론 충분하지 않고, 사람의 판단은 Decision Making과 Machine Prediction으로 이루어집니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/13.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Decision Making은 여러 대안 중 가장 Best 행동을 찾는 것이고, Machine Prediction은 미래의 Unknown event를 예측하는 것입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/14.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이 두가지를 조합하기 위해 머신러닝의 예측값을 Decision Engine의 Input으로 넣고 결과를 받도록 설계합니다.&lt;/p&gt;

&lt;p&gt;Decision Engine의 제약 조건(constraint)으로 비즈니스 로직상 중요하게 여기는 것들을 넣을 수 있습니다. 예를 들어 특정 제품이 프로모션하고 있다면, 그 부분을 우선적으로 추천해줄 수 있습니다. 그 외에도 아래 사진처럼 새로운 제품에 대한 비즈니스 로직, 재고에 대한 로직 등을 추가할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/15.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Decision Engine은 Mixed Integer Programming을 사용해 예측 값과 비즈니스 룰을 제약 조건으로 삼고 목적 함수를 최대화하는 값이 나오게 됩니다.&lt;/p&gt;

&lt;p&gt;다른 예시로 Supply Chain(공급 관리) 최적화에 대한 내용을 들었습니다.&lt;/p&gt;

&lt;p&gt;준비하고 있어야 하는 안전한 재고량보다 수요 예측이 높게 될 경우와 낮게 될 경우 생길 비용이 비대칭적이다라는 점을 말하며, 수요 예측 결과에 따른 비용을 다르게 정의했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/16.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/17.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;두번째 예시에선 모델의 예측 값을 Deterministic한(한 숫자로 나오는) 수요를 uncertainty range로 대체하는 내용이 나왔습니다.&lt;/p&gt;

&lt;p&gt;Uncertainty Range를 표현하기 위해 Two quantile regression, 분포를 근사하기 위한 앙상블 활용, 모델의 Output을 분포로 표현(Bayesian structural time series)을 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;Uncertainty Range를 구한 후 Robust Optimization를 사용해 최악의 상황을 피하는 방식으로 최적화합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/18.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;a-practical-guide-to-algorithmic-bias-and-explainability-in-machine-learning&quot;&gt;A Practical guide to algorithmic bias and explainability in machine learning&lt;/h3&gt;
&lt;p&gt;이 세션은 MLOps 관련 Github Repository 중 유명한 &lt;a href=&quot;https://github.com/EthicalML/awesome-production-machine-learning&quot;&gt;Awesome production machine learning&lt;/a&gt; 소속이신 분이 발표했습니다.&lt;/p&gt;

&lt;p&gt;머신러닝 모델은 잘못된 학습 데이터로 인해 편향되기 쉽습니다. 이에 최근 트렌드로 유럽에선 AI와 관련한 윤리가 법제화 되고 있습니다. 대표적으로 유럽위원회는 AI의 자동화된 의사결정에 대해 설명받을 수 있는 개인의 권리를 명시합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/19.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/20.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;발표자가 속한 Ethical AI라는 조직에선 머신러닝 모델 개발의 각 단계에서 편향을 줄이고, 모델을 설명하기 위한 오픈소스를 개발하고 있습니다.&lt;/p&gt;

&lt;p&gt;그 중 대표적으로 데이터 분석 단계에선 eXplainable AI(XAI)란 라이브러리를 소개하고, 모델 개발 및 평가 단계에선 &lt;a href=&quot;https://github.com/SeldonIO/alibi&quot;&gt;ALIBI&lt;/a&gt;란 라이브러리에 대해 소개했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/21.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/22.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/23.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ALIBI 라이브러리에 구현되어 있는 대표적인 Explainer는 Anchors 가 있습니다.&lt;/p&gt;

&lt;p&gt;Anchors는 내부 알고리즘으로 모델을 설명하는 것이 아니라 입력값의 조합에 따른 출력값을 가지고 모델을 설명합니다. 이러한 특성 때문에 Tabular 데이터부터 Text, Image와 같은 비정형 데이터까지 모두 적용할 수 있다는 장점이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/24.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Anchors 는 특정 피쳐를 고정한 후, 다른 피쳐에 변화를 주었을 때 예측값이 변하는지 변하지 않는지를 관찰하는 방식으로 Anchors 를 알아냅니다.&lt;/p&gt;

&lt;p&gt;Anchors를 찾아낼 때는 Brute-Force 방식이 아닌 Beam search 와 MAB 방식으로 효율적으로 찾아냅니다. 아래 예시는 beagle의 Anchor 이미지를 고정한 후 다른 영역을 변화시키더라도 예측값은 항상 일정하다는 것을 보여줍니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://homes.cs.washington.edu/~marcotcr/aaai18.pdf&quot;&gt;논문 보러가기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/25.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;unified-tooling-for-machine-learning-interpretability&quot;&gt;Unified tooling for machine learning interpretability&lt;/h3&gt;
&lt;p&gt;이 세션은 Microsoft에서 개발 중인 interpretML 오픈소스에 대한 세션입니다. &lt;a href=&quot;https://github.com/interpretml/interpret&quot;&gt;공식 Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;interpretML의 첫번째 특징은 모델의 정확도와 설명력을 모두 갖추려 했다는 점입니다.&lt;/p&gt;

&lt;p&gt;일반적으로 머신러닝 모델의 정확도가 높아질수록 설명하기는 어렵다는 문제가 있습니다. Microsoft 팀은 전통적인 GAM 모델에 Boosting 기법을 결합한 Explainable Boosting Machine (EBM) 이라는 알고리즘을 제안했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/26.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;두번째 특징은 모델을 설명하는 기능들을 갖추고 있다는 점입니다.&lt;/p&gt;

&lt;p&gt;특정 피쳐가 모델 전체에 미치는 영향에 관점(Global)과 특정 instance에 대해 왜 그렇게 예측했는지에 대한 설명(Local)으로 두 가지 측면에서 모델을 설명합니다. 그 이후엔 라이브 코딩으로 라이브러리를 활용하는 방법에 대해 알려줬습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/27.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/oreilly-strata-2019-review/28.png&quot; alt=&quot;&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;참고-자료&quot;&gt;참고 자료&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;쏘카 데이터그룹의 타다데이터팀 카일과 윤이 다녀와서 사내 전파용으로 만든 발표 자료 : &lt;a href=&quot;https://speakerdeck.com/socar/oreilly-strata-data-conference-new-york-2019-hugi&quot;&gt;SOCAR Speakerdeck&lt;/a&gt;에 업로드했습니다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;O’reilly Strata Data Conference 영상을 다시 보는 방법
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://learning.oreilly.com/&quot;&gt;Oreailly Learing&lt;/a&gt;에 가입 후 시청 가능합니다. 첫 가입시 1달 무료고, 그 이후엔 구독 비용이 존재합니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;O’reilly Starata Data Conference New York 발표 자료
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://conferences.oreilly.com/strata/strata-ny/public/schedule/proceedings&quot;&gt;Oreilly Conference 발표 자료&lt;/a&gt;에 발표 자료가 업로드되어 있습니다. 모든 발표 자료가 업로드되진 않았지만, 관심있으신 부분에 대한 자료를 보시면 좋을 것 같습니다&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>kyle</name></author><category term="data" /><category term="machine-learning" /><summary type="html">O’Reilly Strata Data Conference New York 2019 다녀온 후 작성한 후기입니다. 아래 내용을 다룹니다.</summary></entry><entry><title type="html">AWS VPC에서 FQDN Outbound Control</title><link href="http://localhost:4000/security/2019/09/02/aviatrix-fqdn.html" rel="alternate" type="text/html" title="AWS VPC에서 FQDN Outbound Control" /><published>2019-09-02T20:00:00+09:00</published><updated>2019-09-02T20:00:00+09:00</updated><id>http://localhost:4000/security/2019/09/02/aviatrix-fqdn</id><content type="html" xml:base="http://localhost:4000/security/2019/09/02/aviatrix-fqdn.html">&lt;div class=&quot;photo-copyright&quot;&gt;
Photo by &lt;a href=&quot;https://unsplash.com/@andreoiide?utm_medium=referral&amp;amp;utm_campaign=photographer-credit&amp;amp;utm_content=creditBadge&quot;&gt;Andrea Enríquez Cousiño&lt;/a&gt;
&lt;/div&gt;

&lt;h3 id=&quot;aws-vpc에서-fqdn-outbound-control&quot;&gt;AWS VPC에서 FQDN Outbound Control&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;On-premise&lt;/strong&gt; 환경에서 현재 회사의 성장세를 따라가기 어렵다고 판단하고, 1년 전부터 Cloud 환경으로 마이그레이션을 진행하고 있습니다. 현재는 중요 서비스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;90%&lt;/code&gt; 이상이 Cloud 환경으로 마이그레이션 되었으며, 그 과정에서 인프라를 구성하는 많은 구성 요소가 변경, 대체 되었습니다. 또한, 여러 &lt;code class=&quot;highlighter-rouge&quot;&gt;보안 요구사항&lt;/code&gt;을 만족시키기 위해서 추가적인 시스템 도입에 대해서 고민하였고, 그 과정을 공유하고자 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;outbound-fqdn-filtering을-하려는-이유&quot;&gt;Outbound FQDN filtering을 하려는 이유&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;멀웨어 2차 확산 방지&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;멀웨어에 감염된 경우 Outbound FQDN Filtering을 통해 멀웨어 &lt;a href=&quot;https://ko.wikipedia.org/wiki/C%26C_(%EC%95%85%EC%84%B1_%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4)&quot;&gt;C&amp;amp;C&lt;/a&gt; 서버에 연결하지 못하게 하고, &lt;u&gt;악성 코드&lt;/u&gt;가 컴퓨터의 데이터를 외부로 전송하려고 하면 대상에 연결하지 못하게 할 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Outbound 트래픽에 대한 무단 활동 감지&lt;/li&gt;
  &lt;li&gt;google.com 등 &lt;strong&gt;IP Range&lt;/strong&gt;가 넓고, &lt;a href=&quot;https://en.wikipedia.org/wiki/Content_delivery_network&quot;&gt;CDN&lt;/a&gt; 서비스 같은 지속 해서 변하는 IP 대응&lt;/li&gt;
  &lt;li&gt;AWS - Security Groups 기준 Inbound or outbound rules per security group은 60개로 &lt;a href=&quot;https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html&quot;&gt;제한&lt;/a&gt; 됩니다. Inbound 관점에서 인터넷에서 고객 서비스는 특이사항이 아닐 수 있으나, Outbound 관점에서는 updates.ubuntu.com(IP 15), Github(IP 12) 등 타사의 업데이트 및 API를 생각하면 &lt;u&gt;60개의 IP 제한은 충분하지 않다&lt;/u&gt;는 것을 알 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;cloud-환경에서-outbound-트래픽에-대한-관리를-어떻게-할까&quot;&gt;Cloud 환경에서 Outbound 트래픽에 대한 관리를 어떻게 할까?&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Cloud Platform에서 &lt;u&gt;TCP/IP&lt;/u&gt; Outbound에 대해서는 로그 및 관리를 다양한 Management Service로 지원하고 있지만, Outbound 트래픽 중에 IP 주소가 아닌 &lt;a href=&quot;https://en.wikipedia.org/wiki/Fully_qualified_domain_name&quot;&gt;&lt;strong&gt;FQDN&lt;/strong&gt;&lt;/a&gt;을 기준으로 한 Filtering에 대한 지원은 Management Service 만으로 대처가 어렵다고 판단하여 별도의 솔루션 도입을 계획하게 되었고, 다음과 같이 요구사항을 정리해 보았습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Outbound - FQDN filtering +@(TCP/IP)
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; HTTP/HTTPS +@((Wildcard)&lt;span class=&quot;err&quot;&gt;*&lt;/span&gt;.domain.com)
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Multiple Accounts and Cloud Platform Support
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; 확장성, 관리 편의성 (Infrastructure as code, Update)
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; 안정성 (다양한 레퍼런스, Monitoring, HA)
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; 비용 (저렴한 구축/라이센스 비용)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그 이후에는 오픈소스(&lt;a href=&quot;https://aws.amazon.com/ko/blogs/security/how-to-add-dns-filtering-to-your-nat-instance-with-squid/&quot;&gt;Squid&lt;/a&gt;), 유료 솔루션(&lt;a href=&quot;https://aws.amazon.com/marketplace/pp/B00PJ2V04O?qid=1567422902264&amp;amp;sr=0-2&amp;amp;ref_=srh_res_product_title&quot;&gt;paloalto&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/marketplace/pp/B01N49IN0S?qid=1567422994913&amp;amp;sr=0-16&amp;amp;ref_=srh_res_product_title&quot;&gt;Cisco vMX&lt;/a&gt; 등)을 검토 하였고, 그 중 국내에서는 레퍼런스를 찾아보기 쉽지 않지만 &lt;a href=&quot;https://aws.amazon.com/marketplace/pp/B079T2HGWG?qid=1567423038998&amp;amp;sr=0-1&amp;amp;ref_=srh_res_product_title&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Aviatrix&lt;/code&gt;&lt;/a&gt; 유료 솔루션을 선정하였습니다. 선정 과정에서 확인해본 결과 &lt;u&gt;해외 레퍼런스&lt;/u&gt;의 경우에는 NASA, Netflix, Hyatt 등이 있었으며, 요구 사항에서 필요로 하는 &lt;strong&gt;Service(FQDN, TransitGW, VPN)에 대한&lt;/strong&gt; 비용 및 &lt;a href=&quot;https://en.wikipedia.org/wiki/Infrastructure_as_code&quot;&gt;IaC&lt;/a&gt; 배포, 구성이 타 유료 솔루션보다 이점이 있다는 것을 감안하여 Aviatrix을 선정하게 되었습니다. 선정 과정에서 참고로 한 자료는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/quickstart/architecture/aviatrix-fqdn-egress-filtering/?nc1=h_ls&quot;&gt;AWS 기반 Aviatrix FQDN Egress Filtering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.aviatrix.com/solutions/egress-security.php&quot;&gt;Controlling Outbound VPC Traffic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/answers/networking/controlling-vpc-egress-traffic/&quot;&gt;AWS Answers - Controlling VPC Egress Traffic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;aviatrix-솔루션-구축을-통한-요구사항-검토-aws&quot;&gt;Aviatrix 솔루션 구축을 통한 요구사항 검토 (AWS)&lt;/h4&gt;

&lt;p&gt;Aviatrix 솔루션 테스트를 위해, AWS Marketplace에서 Aviatrix을 선택 후 &lt;strong&gt;Free Trial&lt;/strong&gt; 이용이 가능한 Custom 유형을 선택하여 테스트 초기 환경을 구성합니다. &lt;strong&gt;AWS 인프라(EC2 등) 사용 금액이 발생&lt;/strong&gt;하기 때문에 EC2 Instanc Type은 &lt;strong&gt;최소 스펙&lt;/strong&gt;을 선택하여 테스트를 진행합니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/marketplace/pp/B0155GB0MA?ref_=aws-mp-console-subscription-detail&quot;&gt;AWS-Marketplace (Aviatrix Secure Networking Platform - Custom)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;설치 방법은 두가지를 제공합니다.
&lt;img src=&quot;/img/posts_aviatrix/cloudformation-image.png&quot; alt=&quot;1&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Amazon Machine Image (AMI)를 통한 직접 설치&lt;/li&gt;
  &lt;li&gt;CloudFormation Template을 이용한 자동화된 설치&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;원활한 테스트를 위해 CloudFormation Template을 선택하여 진행합니다. Amazon Machine Image를 통한 구성 시에는 Role, Network 구성 등의 추가 설정이 필요합니다. 상세 설치 과정은 Aviatrix에서 Guide를 제공하고 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;(CloudFormation Template 의 IAM Role, Policy 등은 아래에 별도 분석하겠습니다.)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aviatrix.com/StartUpGuides/aviatrix-cloud-controller-startup-guide.html&quot;&gt;Aviatrix CloudFormation Template Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CloudFormation 배포가 완료된 상태에서 Output 카테고리에서 AviatrixControllerEIP 정보를 확인합니다. EIP에 대한 구성을 하지 않을 경우에는 AviatrixControllerPrivateIP 정보를 확인하여 웹 페이지 주소로 사용됩니다. PrivateIP는 &lt;strong&gt;초기 임시 패스워드&lt;/strong&gt;로도 구성됩니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;https://AviatrixControllerEIP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts_aviatrix/cloudformation-output.png&quot; alt=&quot;2&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AviatrixControllerEIP 접속 이후 관리자 아이디 및 버전을 설정합니다.&lt;br /&gt;
설정을 완료할 경우에는 초기 로그인화면에서 Onboarding 화면이 노출됩니다.&lt;br /&gt;
화면에서 이용하고 있는 Cloud Platform을 지정하고 추가적인 설정을 진행합니다.&lt;/p&gt;

&lt;p&gt;모든 설정을 완료한 이후에 제공되는 Aviatrix의 사용자 페이지 입니다.
&lt;img src=&quot;/img/posts_aviatrix/aviatrix-1.png&quot; alt=&quot;3&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
EC2 의 Outbound 트래픽을 로깅 및 관리하기 위해서 우선적으로 Gateway의 설정이 필요해서, Aviatrix 사용자 카테고리에서 Gateway 설정으로 이동합니다.&lt;/p&gt;

&lt;p&gt;New Gateway 설정을 진행합니다.
&lt;img src=&quot;/img/posts_aviatrix/aviatrix-gw-add.png&quot; alt=&quot;10&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
“OK”를 클릭할 경우 퍼센트에 대한 상태 이미지가 노출됩니다. 이후 작업은 직접 설치를 진행하지 않아도 자동 설치 및 Gateway 서버에 대한 환경이 구성됩니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;(HA 구성의 경우에는 다양한 방법을 제공하고 있어 아래 링크를 추가해 드립니다, Aviatrix 깊게 들여다보기(HA, Egress FQDN Discovery) 내용은 블로그 하단에 분류하였습니다.)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aviatrix.com/HowTos/gateway.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gateway&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aviatrix.com/HowTos/gateway.html#gateway-single-az-ha&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gateway-HA&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aviatrix.com/Solutions/gateway_ha.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HA-옵션&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Private Subnet의 Route Table을 생성해, 외부로 나가는 모든 트래픽이 Aviatrix-GW를 통해서 나가도록 설정을 진행합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;0.0.0.0/0&quot;&lt;/code&gt; 에 대한 Target을 Aviatrix-GW &lt;u&gt;ENI&lt;/u&gt;로 지정합니다. 자동 등록을 원할 경우 Aviatrix Controller 사용자 웹 페이지에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Gateway &amp;gt; Aviatrix-GW: Edit &amp;gt; Source NAT&lt;/code&gt;를 통한 설정이 가능합니다.
&lt;img src=&quot;/img/posts_aviatrix/route-table-avi.png&quot; alt=&quot;11&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;FQDN 로깅 및 관리를 위해, Aviatrix Controller 사용자 웹 페이지에서 &lt;strong&gt;security &amp;gt; Egress Control &amp;gt; Egress FQDN Filter&lt;/strong&gt;를 설정합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Egress FQDN Filter 생성 White List/Black List &amp;gt; Black 지정&lt;/li&gt;
  &lt;li&gt;이후 &lt;strong&gt;실 서버 환경&lt;/strong&gt; 도입의 경우 Egress FQDN View Log를 확인하고, 사용하고 있는 FQDN을 보안성에 맞도록 분리하여, Egress FQDN Filter를 White List기반으로 변경할 수 있는 환경을 사전에 대비합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;테스트를 위해서 FQDN Filter를 아래의 이미지와 같이 &lt;u&gt;White&lt;/u&gt; 설정한 이후에, Aviatrix-GW를 바라 보고 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Private-route-table&lt;/code&gt; 의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Private-Subnet&lt;/code&gt;에서 운영되는 인스턴스에서 다음 명령어를 실행하였습니다.
&lt;img src=&quot;/img/posts_aviatrix/fqdn-list.png&quot; alt=&quot;12&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /dev/null &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{http_code}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; https://www.naver.com
curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /dev/null &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{http_code}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; https://google.com
curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /dev/null &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{http_code}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; https://www.google.com
curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /dev/null &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{http_code}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; https://docs.google.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;테스트에 대한 Egress FQDN View Log&lt;/p&gt;

&lt;div class=&quot;language-r highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;m&quot;&gt;2019-09-01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;35.886612+00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-172-31-14-85&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;avx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AviatrixFQDNRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfq_ssl_handle_client_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#274  Gateway=Aviatrix-GW S_IP=172.31.24.52 D_IP=210.89.164.90 hostname=www.naver.com state=NO_MATCH drop_reason=NOT_WHITELISTED&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2019-09-01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;53.442375+00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-172-31-14-85&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;avx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AviatrixFQDNRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfq_ssl_handle_client_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#274  Gateway=Aviatrix-GW S_IP=172.31.24.52 D_IP=172.217.27.78 hostname=google.com state=MATCHED&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2019-09-01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;53.654101+00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-172-31-14-85&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;avx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AviatrixFQDNRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfq_ssl_handle_client_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#274  Gateway=Aviatrix-GW S_IP=172.31.24.52 D_IP=216.58.197.164 hostname=www.google.com state=MATCHED&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2019-09-01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;58.707731+00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-172-31-14-85&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;avx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AviatrixFQDNRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;check_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#65  Gateway=Aviatrix-GW S_IP=172.31.24.52 D_IP=216.58.197.164 hostname=www.google.com state=MATCHED&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2019-09-01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;21.940692+00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-172-31-14-85&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;avx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AviatrixFQDNRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfq_ssl_handle_client_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#274  Gateway=Aviatrix-GW S_IP=172.31.24.52 D_IP=172.217.26.14 hostname=docs.google.com state=MATCHED&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2019-09-01&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T16&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;41&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;22.323298+00&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;00&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;-172-31-14-85&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;avx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AviatrixFQDNRule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRIT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nfq_ssl_handle_client_hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#274  Gateway=Aviatrix-GW S_IP=172.31.24.52 D_IP=172.217.25.77 hostname=accounts.google.com state=MATCHED&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;로그를 통해 &lt;strong&gt;state&lt;/strong&gt;를 확인하고 후속 조치가 가능합니다. Aviatrix 서비스에 대한 다양한 로그 관리 및 시각화 등이 가능하기 때문에, 별도 추가로 확인하고 싶으신 내용은 아래의 링크에서 확인해 주시기 바랍니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aviatrix.com/HowTos/AviatrixLogging.html&quot;&gt;Aviatrix-Logging&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 내용에서 google.com FQDN에 대해서 &lt;a href=&quot;https://en.wikipedia.org/wiki/Fully_qualified_domain_name&quot;&gt;호스트 명&lt;/a&gt;을 지정하지 않을 때에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;*&quot;&lt;/code&gt;로 적용됩니다. (*.google.com = google.com)&lt;/p&gt;

&lt;h4 id=&quot;aws-account-with-aviatrix-gateway-architecture&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AWS Account with Aviatrix Gateway Architecture&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts_aviatrix/fqdn-architecture.png&quot; alt=&quot;13&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Instance Outbound Flow &amp;amp; Aviatrix Controller Gateway HA Flow&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  CLIENT[시작: Instance] --&amp;gt;|1.Private  Route Table| ag(Aviatrix Gateway)
    ag --&amp;gt;|2. Public Route Table| igw(Internet Gateway)
    igw --&amp;gt;|3| int[Internet]
    ac(시작: Aviatrix Controller) --&amp;gt; internet2[Internet]
    internet2[Internet]--&amp;gt;|Health Check| ag
    internet2[Internet]--&amp;gt;|Health Check| agha(Aviatrix Gateway HA)
    ag--&amp;gt;|Failover| agha(Aviatrix Gateway HA)
    agha--&amp;gt;|Failover| ag
&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Private Subnet에서의 Outbound 발생 시 자체 설정한 &lt;code class=&quot;highlighter-rouge&quot;&gt;Route table&lt;/code&gt;을 참조&lt;/li&gt;
  &lt;li&gt;Route table에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;0.0.0.0/0&quot;&lt;/code&gt; 통신을 Aviatrix Gateway의 &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ENI&lt;/code&gt;&lt;/a&gt;로 전달&lt;/li&gt;
  &lt;li&gt;Aviatrix Gateway에 설정되어있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Aviatrix Controller&lt;/code&gt; 정책에 따라 Outbound 트래픽 체크 이후에, Aviatrix Gateway에 Internet gateway로 전달&lt;/li&gt;
  &lt;li&gt;Internet Gateway을 요청한 통신을 외부(Internet)로 전달&lt;/li&gt;
  &lt;li&gt;Aviatrix Controller의 경우 Internet을 통해 Aviatrix Gateway Health Check&lt;/li&gt;
  &lt;li&gt;Aviatrix Gateway 장애 발생시 Gateway_HA의 &lt;u&gt;ENI&lt;/u&gt;로 Private Subnet의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Route table&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;0.0.0.0/0&quot;&lt;/code&gt; 업데이트&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;aviatrix-자세히-들여다보기&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Aviatrix 자세히 들여다보기&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;1-hahigh-availability&quot;&gt;&lt;strong&gt;1. &lt;a href=&quot;https://en.wikipedia.org/wiki/High_availability&quot;&gt;HA(High Availability)&lt;/a&gt;&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;HA 구성은 모든 인프라의 &lt;strong&gt;기본&lt;/strong&gt;으로 Aviatrix을 사용할 경우 아래와 같은 간단한 작업으로 적용이 가능합니다.&lt;/p&gt;

&lt;p&gt;Gateway &amp;gt; Edit &amp;gt; Gateway Single AZ HA “Enable”&lt;br /&gt;
Gateway &amp;gt; Edit &amp;gt; Gateway for High Availability Peering&lt;br /&gt;
(HA 구성을 위해 &lt;u&gt;운영&lt;/u&gt; 중인 Gateway Subnet과 다른 &lt;a href=&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html&quot;&gt;AZ&lt;/a&gt;의 &lt;u&gt;Public-Subnet&lt;/u&gt;을 선택합니다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts_aviatrix/gateway-ha-public-b.png&quot; alt=&quot;20&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;HA 구성을 위한 설정은 마무리하였으며, 정상적으로 &lt;strong&gt;Failover&lt;/strong&gt;가 되는지 확인을 위해 아래 구성을 진행하였습니다.&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Private-Subnet에서 운영되는 인스턴스에 대한 실시간 모니터링 설정
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Failover 기능 테스트를 위해 Aviatrix-GW 인스턴스를 AWS Console에서 강제 종료(STOP)
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Private-Subnet에서 운영되는 인스턴스에 대한 실시간 모니터링 지표 확인
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;u&gt;Failover&lt;/u&gt;를 테스트하기 전의 Aviatrix Gateway 상태 이미지입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts_aviatrix/gateway-status.png&quot; alt=&quot;21&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;
&lt;u&gt;Failover&lt;/u&gt;를 테스트하기 위해 Gateway를 강제 종료한 Aviatrix Gateway 상태 이미지입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts_aviatrix/gateway-status-2.png&quot; alt=&quot;22&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;테스트 결과: Private-Subnet에서 운영되고 있는 인스턴스에 모니터링 에이전트(Telegraf)를 설정하여, ICMP 프로토콜을 이용한 &lt;u&gt;1s&lt;/u&gt; 기준으로 &lt;strong&gt;Packet Loss&lt;/strong&gt; 현상이 발생 되지 않았습니다. 웹사이트 기준에서는 Gateway가 Failover 되는 시점을 인지할 수 없는 정도입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts_aviatrix/monitoring.png&quot; alt=&quot;23&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Aviatrix-Gateway HA Flow (Failover)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph TB
    subgraph Public_A
Controller[Controller]
end
    Controller -x |1.Health Check 실패|Gateway
    Controller -x |2.AWS-Role을 이용한 table update|Private_Routetable
    Private_Routetable -x |3.traffic|Gateway_HA
    Controller--&amp;gt;|Health Check |Gateway
    Controller--&amp;gt;|Health Check|Gateway_HA
    subgraph Public
    subgraph Public_B
Gateway[Gateway]
end
    Gateway--&amp;gt;Public_Routetable
    subgraph Public_C
Gateway_HA[Gateway_HA]
end
end
    Gateway_HA--&amp;gt;Public_Routetable
    subgraph Private
    subgraph Private_A
Instance-A[Instance-A]
end
    Instance-A--&amp;gt;Private_Routetable
    subgraph Private_B
Instance-B[Instance-B]
end
    Instance-B--&amp;gt;Private_Routetable
    Private_Routetable--&amp;gt;Gateway
end
    Public_Routetable--&amp;gt;Internet
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;AviatrixController -&amp;gt; Gateway [Health Check] -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;Fail&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Gateway_HA로 네트워크 트래픽 변경
    &lt;ul&gt;
      &lt;li&gt;문제 되는 Gateway로 설정되어 있던 Route Table 업데이트&lt;/li&gt;
      &lt;li&gt;예) Private-Subnet &amp;gt; Route Table &amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;0.0.0.0/0&quot;&lt;/code&gt; Target &lt;code class=&quot;highlighter-rouge&quot;&gt;Gateway_HA&lt;/code&gt; ENI로 업데이트&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;2-egress-fqdn-discovery&quot;&gt;&lt;strong&gt;2. &lt;a href=&quot;https://docs.aviatrix.com/HowTos/fqdn_discovery.html&quot;&gt;Egress FQDN Discovery&lt;/a&gt;&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;해당 기능은 &lt;strong&gt;실 서버&lt;/strong&gt;에 적용하기에 앞서 실 서버에서 FQDN outbound의 &lt;u&gt;사용 리스트&lt;/u&gt;를 정리하는데 유용한 기능입니다.&lt;/p&gt;

&lt;p&gt;Security &amp;gt; Egress Control &amp;gt; (Optional) Egress FQDN Discovery &amp;gt; Gateway “Start” (선택된 Gateway는 FQDN Filter에 연결이 안 되어 있어야 합니다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts_aviatrix/fqdn-discovery-start.png&quot; alt=&quot;23&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;테스트를 위해 Private-Subnet에서 운영되고 있는 인스턴스에서 아래 명령어를 실행합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /dev/null &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{http_code}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; https://tech.socarcorp.kr
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;1번 HA 테스트로 인해 변경된 Aviatrix-GW-hagw에서 발생한 FQDN 내용을 확인할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts_aviatrix/fqdn-discovery-status.png&quot; alt=&quot;23&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;테스트 결과: FQDN Discovery 기능을 통해 &lt;strong&gt;실 서버&lt;/strong&gt; FQDN Outbound를 모두 사전에 확인하고, 필요 유무에 따라서 FQDN Filter 정책을 정의하는 데 유용합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;3-httpstls-통신을-gateway가-가로채서-어디로-가는지-확인할-수-있는-이유&quot;&gt;&lt;strong&gt;3. HTTPS/TLS 통신을 Gateway가 가로채서 어디로 가는지 확인할 수 있는 이유&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;2번 내용을 보면 HTTPS/TLS 통신을 &lt;strong&gt;Gateway가 어떻게?&lt;/strong&gt; 가로 채지 라는 의문점이 있습니다, 해당 내용은 SNI에 대한 이해가 필요해서 SNI 내용을 정리해 드립니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SNI(Server Name Indication)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;두 TCP 피어 간 암호화된 TLS 터널을 설정할 수 있고, 클라이언트는 서버에 대한 IP 주소 만 알고 있어도 TLS Handshake를 수행 할 수 있지만, &lt;u&gt;서버가 각각 고유한 TLS 인증서를 가진 여러 개의 독립 사이트를 동일한 IP 주소로 운영하는 문제를 해결하기 위해&lt;/u&gt; SNI 확장이 TLS 프로토콜에 도입되었습니다.&lt;/li&gt;
  &lt;li&gt;SNI는 &lt;code class=&quot;highlighter-rouge&quot;&gt;여러 개&lt;/code&gt;의 독립 사이트 중에 &lt;code class=&quot;highlighter-rouge&quot;&gt;하나의 사이트&lt;/code&gt;를 지정 하기 위해 필요한 필드입니다.&lt;/li&gt;
  &lt;li&gt;하지만, TLS Handshake에서 암호화 통신을 &lt;code class=&quot;highlighter-rouge&quot;&gt;하기 전인&lt;/code&gt; &lt;strong&gt;ClientHello&lt;/strong&gt; 과정에 적용됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TLS Handshake&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
opt 암호화 X
    Client -&amp;gt;&amp;gt; Server: ClientHello
    Server -&amp;gt;&amp;gt; Client: ServerHello
    end
opt 암호화
    Server -&amp;gt;&amp;gt; Client: ServerCertificate
    Server -&amp;gt;&amp;gt; Client: ServerHelloDone
    Client -&amp;gt;&amp;gt; Server: KeyExhange/ChangeCipherSpec/Finished
    Server -&amp;gt;&amp;gt; Client: ChangeCipherSpec/Finished
    end
    Server -&amp;gt; Client: Application Date
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TLS_1.3 Handshake &amp;gt; ClientHello&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;mermaid&quot;&gt;
sequenceDiagram
    Client -&amp;gt;&amp;gt; Gateway: TLS ClientHello, SNI=www.socar.kr, Client`s Diffie-Hellman Key
opt FQDN Filter
    Client --&amp;gt; Gateway: SNI Check
Note right of Client: FQDN Filter 성공
    Gateway -&amp;gt;&amp;gt; Server: TLS ClientHello, SNI=www.socar.kr, Client`s Diffie-Hellman Key
end
opt FQDN Filter
    Client --&amp;gt; Gateway: SNI Check
Note right of Client: FQDN Filter 실패
    Gateway --&amp;gt;&amp;gt; Client: TLS ClientHello, SNI=www.socar.kr, Client`s Diffie-Hellman Key
end
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Gateway가 SNI 필드를 확인하는 방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;암호화가 되지 않은 평문&lt;/code&gt;으로 전송하기 때문입니다.&lt;/li&gt;
  &lt;li&gt;사용자 입장에서는 SNI는 접속하려는 사이트 주소가 암호화되지 않은 평문으로 전송되기 때문에, &lt;code class=&quot;highlighter-rouge&quot;&gt;타인&lt;/code&gt;이 중간에 트래픽을 가로채서 &lt;u&gt;사용자가 조회하는 사이트&lt;/u&gt;를 확인 할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;TLS 1.3 최종안이 조율되는 시기에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Encrypted SNI&lt;/code&gt;로 인해서 Gateway가 SNI 필드를 확인하는 방법이 불가능 할 수도 있었지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;TLS 1.3 최종안&lt;/code&gt; 에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;필수&lt;/code&gt;가 아닌, &lt;code class=&quot;highlighter-rouge&quot;&gt;확장&lt;/code&gt; 기능으로써 추가되었습니다.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%84%9C%EB%B2%84_%EB%84%A4%EC%9E%84_%EC%9D%B8%EB%94%94%EC%BC%80%EC%9D%B4%EC%85%98&quot;&gt;Encrypted SNI&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;4-aviatrix-cloudformation-template의-role-policy-이해하기&quot;&gt;&lt;strong&gt;4. Aviatrix-CloudFormation Template의 role, policy 이해하기&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;CloudFormation Template은 어떤 내용을 가지고 있을까?&lt;/li&gt;
  &lt;li&gt;왜 Gateway 서버가 자동으로 설치 되었을까?&lt;/li&gt;
  &lt;li&gt;왜 Private-Subnet Route Table 은 자동으로 업데이트가 되었을까?&lt;/li&gt;
  &lt;li&gt;멀티 Account 구성은 어떻게 가능할까?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위에 내용은 CloudFormation Template의 &lt;u&gt;Role, Policy&lt;/u&gt; 관계를 보면 알 수 있습니다.
아래의 소스는 CloudFormation Template의 일부 내용입니다.&lt;/p&gt;

&lt;p&gt;EC2 생성 과정에서 aviatrix-role-ec2를 등록하는 내용입니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;IAMRoleParam&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Determine if IAM roles aviatrix-role-ec2 and aviatrix-role-app should be created.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;New&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;String&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;AllowedValues&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aviatrix-role-ec2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;New&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;EC2에 등록하기 위한 role-ec2를 생성하는 내용입니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;AviatrixRoleEC2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AWS::IAM::Role&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AviatrixIAMRoleNotExist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;RoleName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aviatrix-role-ec2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;AssumeRolePolicyDocument&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Principal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Service&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ec2.amazonaws.com&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sts:AssumeRole&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;주목할 점&lt;/code&gt;이 있습니다, role-app을 사용할 수 있는 &lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/IAM/latest/UserGuide/reference_policies_elements_principal.html&quot;&gt;Principal&lt;/a&gt;에 “Ref”: “AWS::AccountId” 등록을 통해서 가능하도록 설정되는 것을 알 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;AviatrixRoleApp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AWS::IAM::Role&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AviatrixIAMRoleNotExist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;RoleName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aviatrix-role-app&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;AssumeRolePolicyDocument&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Principal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;AWS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Fn::Join&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:iam::&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Ref&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AWS::AccountId&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:root&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sts:AssumeRole&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;여기서 &lt;code class=&quot;highlighter-rouge&quot;&gt;주목할 점&lt;/code&gt;은 &lt;u&gt;arn:aws:iam::*:role/aviatrix-*&lt;/u&gt; 설정에 있습니다. 해당 &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;*&quot;&lt;/code&gt;설정으로 role-ec2의 Policy는 arn:aws:iam::&lt;code class=&quot;highlighter-rouge&quot;&gt;AccountId&lt;/code&gt;:role/aviatrix-role-app의 Policy를 할당 받아서 사용할 수 있게됩니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;CreateAviatrixAssumeRolePolicy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AWS::IAM::ManagedPolicy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AviatrixIAMRoleNotExist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ManagedPolicyName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aviatrix-assume-role-policy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Policy for creating aviatrix-assume-role-policy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;PolicyDocument&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sts:AssumeRole&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:iam::*:role/aviatrix-*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aws-marketplace:MeterUsage&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Roles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Ref&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AviatrixRoleEC2&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;role-app Policy의 경우에는 아래 추가된 이미지처럼 &lt;u&gt;많은 Action&lt;/u&gt;이 정의되어있습니다.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;CreateAviatrixAppPolicy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AWS::IAM::ManagedPolicy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AviatrixIAMRoleNotExist&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ManagedPolicyName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aviatrix-app-policy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Policy for creating aviatrix-app-policy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;PolicyDocument&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;..........................&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts_aviatrix/role-check.png&quot; alt=&quot;4&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CloudFormation Template 으로 구성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;AWS 인프라의 이미지&lt;/code&gt;를 통해 정리할 경우, 아래와 같은 구성이 설정됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aviatrix Controller Instance 에 role-ec2 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts_aviatrix/role-ec2.png&quot; alt=&quot;5&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;role-ec2 에 대한 Policy 는 아래와 같이 설정되며, 해당 설정에서 &lt;u&gt;STS 설정&lt;/u&gt;을 주의 깊게 이해합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts_aviatrix/role-ec2-policy.png&quot; alt=&quot;6&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;위의 이미지를 JSON 형태로 확인하면 이해가 더 쉽습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sts:AssumeRole&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;arn:aws:iam::*:role/aviatrix-*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Aviatrix Controller 웹 페이지의 Onboarding 카테고리에서 Cloud Platform에 맞게 설정을 하게 되면, AWS의 경우 role-ec2가 role-app의 policy을 &lt;code class=&quot;highlighter-rouge&quot;&gt;위임&lt;/code&gt; 받아서 사용할 수 있는 상태가 됩니다. role-ec2는 Aviatrix Controller Instance에 등록 되어있는 role 이기 때문에, Aviatrix Controller 웹 페이지에서 role-app에 적용 되어있는 Policy 에 대한 이용이 가능합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;(멀티 Account의 경우에는 멀티 Account에 설정 되어 있는 role-app에 대한 AccountId Trust 등록을 진행하여, 멀티 Account의 role-app을 Controller Account의 role-app이 공유 받아 사용하는 방법으로 동일합니다.)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts_aviatrix/role-app-trust.png&quot; alt=&quot;7&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;multiple-aws-accounts-with-role-switchin-aviatrix-architecture&quot;&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Multiple AWS Accounts with Role Switchin Aviatrix Architecture&lt;/code&gt;&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/img/posts_aviatrix/role-ec2-app-muac.png&quot; alt=&quot;8&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;정리&quot;&gt;정리&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;자세한 설명을 하기 위해 많은 이미지가 추가 되었지만, 실질적으로는 AWS 마켓플레이스에서 라이선스 구입 이후에 진행되는 절차가 간단하며 사용자가 직접 &lt;u&gt;수동&lt;/u&gt;으로 작업해야하는 내용이 &lt;code class=&quot;highlighter-rouge&quot;&gt;거의없습니다.&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Aviatrix의 경우에는 기존의 Cisco 및 paloalto 와는 다른 Cloud 환경에 맞게 개발이 되었다는 것을 쉽게 느낄 수 있었습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Role의 활용&lt;/code&gt; 및 위에서는 자세하게 다루지 않았지만, &lt;u&gt;&quot;EXPORT TO TERRAFORM&quot;&lt;/u&gt; 카테고리 부분에서 리소스 형식에 맞는 *.tf 파일들을 다운로드 받아서 IaC 환경에 활용이 가능합니다.&lt;/li&gt;
  &lt;li&gt;테스트 과정에서는 단일 Account를 활용하였지만, 쏘카에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Transit GW를 이용한 트래픽 중앙 관리&lt;/code&gt;를 통해서 운영하고 있기 때문에 On-premise 적용 등 다양한 아키텍처 구성이 가능합니다.&lt;/li&gt;
  &lt;li&gt;매니저 Cloud Platform에서 모두 운영이 가능하기 때문에 이후 확장성 및 특정 Cloud Platform에 &lt;a href=&quot;https://en.wikipedia.org/wiki/Vendor_lock-in&quot;&gt;Lock-in&lt;/a&gt; 되지 않는다는 장점이 있습니다.&lt;/li&gt;
  &lt;li&gt;그 밖에 사용한 만큼만 지급하는 Cloud 방식에 맞는 &lt;u&gt;라이선스 정책&lt;/u&gt;도 비용적인 부분에서는 많은 장점이 있다고 생각했습니다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;많은 장점&lt;/code&gt; 가운데 지속가능성에 대한 문제는 있습니다, TLS 1.3 최종안이 적용된 지 얼마 되지 않은 상황이지만, Gateway가 SNI 필드를 통해 FQDN Filter 과정이 이후 &lt;strong&gt;SNI 암호화 이후 FQDN Filter를 어떻게 진행할 것인가&lt;/strong&gt;에 대한 문제점이 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;계획중인-aviatrix을-이용한-다양한-환경-구축&quot;&gt;계획중인 Aviatrix을 이용한 다양한 환경 구축&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Aviatrix 로그, 분석 (+시각화/자동화)&lt;/li&gt;
  &lt;li&gt;DMZ 구축 (+VDI)&lt;/li&gt;
  &lt;li&gt;Remote Work의 다양한 설계 (+VPN, +VDI)&lt;/li&gt;
  &lt;li&gt;Inbound 트래픽에 대한 세부적인 로그 및 분석 (+시각화)&lt;/li&gt;
  &lt;li&gt;VM to VM 간의 트래픽 관리&lt;/li&gt;
&lt;/ul&gt;</content><author><name>issac</name></author><category term="security" /><category term="outbound" /><category term="aviatrix" /><category term="fqdn" /><summary type="html">Photo by Andrea Enríquez Cousiño</summary></entry><entry><title type="html">Keycloak를 이용한 SSO 구축(web + wifi + ssh)</title><link href="http://localhost:4000/security/2019/07/31/keycloak-sso.html" rel="alternate" type="text/html" title="Keycloak를 이용한 SSO 구축(web + wifi + ssh)" /><published>2019-07-31T17:20:00+09:00</published><updated>2019-07-31T17:20:00+09:00</updated><id>http://localhost:4000/security/2019/07/31/keycloak-sso</id><content type="html" xml:base="http://localhost:4000/security/2019/07/31/keycloak-sso.html">&lt;div class=&quot;photo-copyright&quot;&gt;
Photo by &lt;a href=&quot;https://unsplash.com/@zhenhu2424?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Zhen Hu&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/search/photos/lock?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;
&lt;/div&gt;

&lt;h2 id=&quot;사내-ssosingle-sign-on-구축하기&quot;&gt;사내 SSO(Single Sign-On) 구축하기&lt;/h2&gt;
&lt;p&gt;이번에 쏘카에서 사내 보안 강화를 위해 SSO를 구축 하였습니다.
  쏘팸과 파트너등이 업무에 사용하는 관리시스템(web) 및 wifi, ssh 접속 인증을 1개의 ID로 관리 하도록 하는 것이 목적입니다.&lt;/p&gt;

&lt;p&gt;정리된 요구 사항은 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;  1.&lt;/span&gt; Web 사이트 인증.(Spring 베이스 사이트)
&lt;span class=&quot;p&quot;&gt;  2.&lt;/span&gt; Wifi 인증
&lt;span class=&quot;p&quot;&gt;  3.&lt;/span&gt; SSH 인증(+ Sudo 인증)
&lt;span class=&quot;p&quot;&gt;  4.&lt;/span&gt; 2차 인증 (OTP) 지원
&lt;span class=&quot;p&quot;&gt;  5.&lt;/span&gt; 유연한 권한 설정(Authorization)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Identity Provider로 여러 유료 솔루션(&lt;a href=&quot;https://www.gluu.org/&quot;&gt;Gluu&lt;/a&gt;, &lt;a href=&quot;https://developers.google.com/identity/&quot;&gt;Google Identity Platform&lt;/a&gt; 등)도 검토 하였으나 설치형 + 오픈소스로 무료로 사용 가능한 &lt;a href=&quot;https://www.keycloak.org/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Keycloak&lt;/code&gt;&lt;/a&gt;으로 구축으로 방향을 잡았습니다.&lt;/p&gt;

&lt;p&gt;Wifi 인증(&lt;a href=&quot;https://freeradius.org/modules/?s=ldap&amp;amp;mod=rlm_ldap&quot;&gt;FreeRADIUS에서 LDAP 모듈 지원&lt;/a&gt;)이나 ssh인증(&lt;a href=&quot;https://www.tldp.org/HOWTO/archived/LDAP-Implementation-HOWTO/pamnss.html&quot;&gt;pam_ldap&lt;/a&gt;)의 경우 OpenLDAP과 연동해서 처리 하는 방법에 대한 자료가 더 많지만, Web기반으로 운용 가능한 시스템을 더 선호해서 Keycloak을 선정하게 되었습니다. &lt;del&gt;험한길을 가게 되었습니다.&lt;/del&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;keycloak이란&quot;&gt;&lt;a href=&quot;https://www.keycloak.org/&quot;&gt;Keycloak&lt;/a&gt;이란?&lt;/h2&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;  -&lt;/span&gt; open source + 설치형
&lt;span class=&quot;p&quot;&gt;  -&lt;/span&gt; OpenID / SAML 지원
&lt;span class=&quot;p&quot;&gt;  -&lt;/span&gt; Restful API 지원 및 커스텀 API 추가 가능
&lt;span class=&quot;p&quot;&gt;  -&lt;/span&gt; RedHat에서 지원하는 프로젝트
&lt;span class=&quot;p&quot;&gt;  -&lt;/span&gt; keycloak-gatekeeper 등을 이용하면 Web 사이트 권한 처리도 용이
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;github: &lt;a href=&quot;https://github.com/keycloak/keycloak&quot;&gt;https://github.com/keycloak/keycloak&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://access.redhat.com/products/red-hat-single-sign-on&quot;&gt;RedHat SSO&lt;/a&gt;의 오픈소스 버전&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;keycloak으로-요구사항의-내용을-어떻게-구현-할까&quot;&gt;Keycloak으로 요구사항의 내용을 어떻게 구현 할까?&lt;/h2&gt;

&lt;h5 id=&quot;1-web-사이트-인증&quot;&gt;1. Web 사이트 인증&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;OpenID / SAML 프로토콜 지원 및 Java client 지원&lt;/li&gt;
  &lt;li&gt;reverse proxy로 동작하는 &lt;a href=&quot;https://github.com/keycloak/keycloak-gatekeeper&quot;&gt;gatekeepr&lt;/a&gt;를 이용해 Web Application에서는 인증 / 권한 코드를 작성하지 않고도 처리 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;2-wifi-인증&quot;&gt;2. Wifi 인증&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;사내에 Cisco 라우터를 사용하고 있고, RADIUS 프로토콜을 지원하므로 &lt;a href=&quot;https://ko.wikipedia.org/wiki/RADIUS&quot;&gt;RADIUS 서버&lt;/a&gt;를 구축하면 가능&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://freeradius.org&quot;&gt;FreeRADIUS&lt;/a&gt;의 &lt;a href=&quot;https://wiki.freeradius.org/modules/Rlm_python&quot;&gt;Python 모듈&lt;/a&gt;에서 keycloak API를 호출해서 인증을 처리 하면 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;3-ssh-인증-sudo-인증&quot;&gt;3. SSH 인증(+ Sudo 인증)&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/5/sshd_config&quot;&gt;sshd_config&lt;/a&gt;설정에서 UsePAM 옵션을 활성화 시키고 &lt;a href=&quot;https://github.com/FreeRADIUS/pam_radius&quot;&gt;pam_radius_auth.so&lt;/a&gt;를 사용해 RADIUS 서버를 통해서 인증 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;4-2차-인증-otp-지원&quot;&gt;4. 2차 인증 (OTP) 지원&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;TOTP 지원&lt;/li&gt;
  &lt;li&gt;Wifi 인증시에는 사용하지 않을 예정이며, SSH(+ sudo) 인증시에는 &lt;a href=&quot;https://www.iana.org/assignments/radius-types/radius-types.xhtml&quot;&gt;Access-Challenge + Reply-Message&lt;/a&gt;를 회신하면 &lt;a href=&quot;https://github.com/FreeRADIUS/pam_radius&quot;&gt;pam_radius_auth.so&lt;/a&gt;에서 사용자에게 추가 입력을 받을 수 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;5-유연한-권한-설정authorization&quot;&gt;5. 유연한 권한 설정(Authorization)&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;keycloak의 권한 설정은 상당히(&lt;del&gt;과하게&lt;/del&gt;) 유연함. (&lt;a href=&quot;https://www.keycloak.org/docs/4.8/authorization_services/&quot;&gt;참고&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;설치-계획-및-구성&quot;&gt;설치 계획 및 구성&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Keycloak은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Kubernetes 클러스터&lt;/code&gt;에 설치&lt;/li&gt;
  &lt;li&gt;FreeRADIUS는 &lt;code class=&quot;highlighter-rouge&quot;&gt;별도 서버에 docker-compose&lt;/code&gt;로 설치(kubernetes 클러스터에 설치해도 상관 없음)
    &lt;ul&gt;
      &lt;li&gt;RADIUS 프로토콜은 &lt;code class=&quot;highlighter-rouge&quot;&gt;UDP&lt;/code&gt; Port2개를 사용합니다.(default: 1812, 1813)&lt;/li&gt;
      &lt;li&gt;&lt;del&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UDP&lt;/code&gt;는 AWS에서 Load Balancer를 사용할 수 없습니다.&lt;/del&gt; &lt;a href=&quot;https://aws.amazon.com/ko/blogs/aws/new-udp-load-balancing-for-network-load-balancer/&quot;&gt;셋팅 완료 후 .. 얼마 전부터 지원시작&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;대략적인 구성은 아래와 같습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;mermaid&quot;&gt;
graph TD;
  subgraph Wifi
    CISCO_ROUTER[Cisco 무선공유기]
  end

  subgraph Linux-Servers
    PAM_RADIUS[SSH 접속]
  end

  subgraph Kubernetes-Cluster
    KEYCLOAK[Keycloak]
    WEB_APP[웹서비스]
  end
  
  subgraph Other-Server
    FREE_RADIUS[FreeRADIUS]
  end

  CISCO_ROUTER--&amp;gt;|RADIUS Protocol|FREE_RADIUS
  FREE_RADIUS--&amp;gt;|HTTP API|KEYCLOAK
  WEB_APP--&amp;gt;|HTTP API|KEYCLOAK
  PAM_RADIUS --&amp;gt;|RADIUS Protocol|FREE_RADIUS
  USER --&amp;gt;|관리시스템 접속|WEB_APP
  USER --&amp;gt;|Wifi 접속|CISCO_ROUTER
  USER --&amp;gt;|SSH 접속|PAM_RADIUS
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;kubernetesaws-eks에-keycloak-설치&quot;&gt;Kubernetes(AWS EKS)에 Keycloak 설치&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://helm.sh/&quot;&gt;helm&lt;/a&gt;이 설치되어 있어야 합니다.&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Keycloak는 &lt;a href=&quot;https://github.com/codecentric/helm-charts/tree/master/charts/keycloak&quot;&gt;Helm Chart&lt;/a&gt;로 제공 되고 있습니다.&lt;/li&gt;
  &lt;li&gt;설치전에 사전에 설정되어야 할 내용들 입니다.
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/helm/charts/tree/master/stable/nginx-ingress&quot;&gt;nginx-ingress&lt;/a&gt; 설치&lt;/li&gt;
      &lt;li&gt;AWS의 Route53에 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.mydomain.com&lt;/code&gt;을 nginx-ingress 설치 후 생성된 LB로 연결.
        &lt;ul&gt;
          &lt;li&gt;Route53에 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.mydomain.com&lt;/code&gt;를 사용하면 등록되지 않은 subdomain은 모두 이곳으로 연결되게 됩니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;RDS로 MySQL 사용.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;helm install시에는 &lt;a href=&quot;https://github.com/codecentric/helm-charts/tree/master/charts/keycloak#configuration&quot;&gt;command line에서 매개변수로 설정&lt;/a&gt;을 할수도 있지만 변경해야 될 값들이 많으므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;values.yaml&lt;/code&gt;을 수정해서 사용합니다.&lt;/li&gt;
  &lt;li&gt;아래는 설치한 환경에 맞게 설정하기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;values.yaml&lt;/code&gt;에서 수정해야 할 할 부분 입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;keycloak&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 초기 admin ID&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;keycloak&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# 초기 admin password&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 파일을 저장하거나 git 등으로 관리 할 경우 비밀번호 노출 위험이 있음.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 설치 이후 바로 암호 변경 권장.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;keycloak1234&quot;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# 위에 'password'에 암호를 직접 입력하지 않고 kubernetes의 secret를 사용할 경우 패스워드가 저장된 Secret의 이름.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;existingSecret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# 위 'existingSecret'에 지정한 Secret 중 사용할 값이 저장된 key 값.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;existingSecretKey&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;ingress&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ingress 사용 여부&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# ssl 오프로딩 사용을 위한 설정&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;nginx.ingress.kubernetes.io/ssl-redirect&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;false&quot;&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# key: value&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 사용할 domain&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;keycloak.mydomain.com&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;persistence&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# If true, the Postgres chart is deployed&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# mysql을 사용하기 위해 false로 수정.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;deployPostgres&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# DB 종류 (&quot;postgres&quot;, &quot;mysql&quot;, &quot;mariadb&quot;, &quot;h2&quot;) 중 하나&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dbVendor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# mysql 접속 정보가 저장된 kubernetes secret 이름.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;existingSecret&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;my-db-secret&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# 위 'existingSecret'에 지정한 Secret 중 사용할 값이 저장된 key 값.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;existingSecretKey&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;password&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# DB 접속 정보&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dbName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db-name&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dbHost&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db-host&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dbPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3306&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;dbUser&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db-user&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;설치 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;helm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; keycloak &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; values.yaml codecentric/keycloak
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(권장사항)&lt;/code&gt; 설치 후 위 &lt;code class=&quot;highlighter-rouge&quot;&gt;keycloak.mydomain.com/auth/admin&lt;/code&gt;로 접속 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;values.yaml&lt;/code&gt;의 username / password에 설정한 비밀번호로 로그인 후 패스워드를 변경 합니다.
    &lt;ul&gt;
      &lt;li&gt;values.yaml 파일을 저장해두거나 git에 올려 두거나 할 경우 노출 위험이 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;상세 설정은 keycloak의 공식 문서를 참조
    &lt;ul&gt;
      &lt;li&gt;https://www.keycloak.org/documentation.html&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;radius-서버-설치-및-keycloak-연동-설정&quot;&gt;RADIUS 서버 설치 및 Keycloak 연동 설정&lt;/h2&gt;

&lt;h5 id=&quot;1-eap확장-가능-인증-프로토콜&quot;&gt;1. &lt;a href=&quot;https://ko.wikipedia.org/wiki/%ED%99%95%EC%9E%A5_%EA%B0%80%EB%8A%A5_%EC%9D%B8%EC%A6%9D_%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C&quot;&gt;EAP(확장 가능 인증 프로토콜)&lt;/a&gt;&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;Wifi 접속 인증으로 사용하기 위해서는 RADIUS 서버가 &lt;code class=&quot;highlighter-rouge&quot;&gt;EAP&lt;/code&gt;를 지원해야 합니다.
    &lt;ul&gt;
      &lt;li&gt;단말에서 사용자가 입력한 ID/PW를 RADIUS 서버에서 복호화해서 평문으로 추출 할수 있어야 Keycloak에 로그인 요청을 할 수 있습니다.&lt;/li&gt;
      &lt;li&gt;EAP 규격중 &lt;code class=&quot;highlighter-rouge&quot;&gt;EAP-TTLS&lt;/code&gt;를 사용하고 2차인증으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;PAP&lt;/code&gt;를 사용합니다. PEAP, CHAP 등의 방식은 hash를 이용해 handshake하는 방식이라 RADIUS 서버에서 사용자가 입력한 Password를 알아 낼수 없습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Wifi 접속 인증이 필요없고, SSH 접속인증을 Keycloak과 연동하기 RADIUS 서버를 사용하는 경우 EAP 관련 설정은 불필요합니다.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;2구성&quot;&gt;2.구성&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/freeradius/freeradius-server/&quot;&gt;Docker Hub에 공개되어 있는 이미지&lt;/a&gt;를 기반으로 python 사용이 가능하도록 수정한 이미지를 생성해 사용합니다.&lt;/li&gt;
  &lt;li&gt;FreeRADIUS는 다양한 모듈을 제공합니다. 그중에 &lt;a href=&quot;https://wiki.freeradius.org/modules/Rlm_python&quot;&gt;Python 모듈(rlm_python)&lt;/a&gt;을 이용해 keycloak과 연동합니다.
    &lt;ul&gt;
      &lt;li&gt;&lt;del&gt;많은 모듈을 제공하는데 Keycloak 모듈은 없네요 ㅠ_ㅠ&lt;/del&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://wiki.freeradius.org/modules/Rlm_perl&quot;&gt;Perl 모듈(rlm_perl)&lt;/a&gt;도 있습니다.(전 Perl을 배워 본적이 없어서…)&lt;/li&gt;
      &lt;li&gt;REST 모듈(rlm_rest)로도 할 수 있을거 같은데 keycloak 연동시에 API 요청을 여러번 해야 해서 이걸로 하면 처리가 힘들 수 있을거 같아서 python 모듈로 방향을 잡았습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;처리 흐름은 아래와 같습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;mermaid&quot;&gt;
graph LR;
  CLIENT[시작: Client] --&amp;gt;|1. RADIUS 요청| FREE_RADIUS(FreeRADIUS)
  subgraph Radius-Server
    FREE_RADIUS --&amp;gt;|2| PYTHON_MODULE(Python모듈)
  end
    PYTHON_MODULE --&amp;gt;|3. 권한확인 요청| KEYCLOAK[Keycloak]
    KEYCLOAK --&amp;gt;|4. 권한확인 응답| PYTHON_MODULE
    PYTHON_MODULE --&amp;gt;|5| FREE_RADIUS
    FREE_RADIUS --&amp;gt;|6. RADIUS 응답| CLIENT
&lt;/div&gt;

&lt;h5 id=&quot;3-설치시-주의사항kubernetes-사용시&quot;&gt;3. 설치시 주의사항(Kubernetes 사용시)&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Radius는 &lt;code class=&quot;highlighter-rouge&quot;&gt;UDP&lt;/code&gt; Port2개를 사용합니다.(default: 1812, 1813)&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;UDP&lt;/code&gt;는 AWS에서 Load Balancer를 사용할 수 없습니다.&lt;/del&gt; &lt;a href=&quot;https://aws.amazon.com/ko/blogs/aws/new-udp-load-balancing-for-network-load-balancer/&quot;&gt;얼마 전부터 지원시작&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Kubernetes에 설치시 ingress의 유형에 따라 UDP를 지원하지 않을 수 있습니다.&lt;/li&gt;
  &lt;li&gt;그냥 NodePort로 노출 시키고, Route53에서 Kubernetes에 사용된 각 Node(EC2 Instance)의 Public IP로 Round Robin으로 분산 시켜도 됩니다.&lt;a href=&quot;https://docs.aws.amazon.com/ko_kr/Route53/latest/DeveloperGuide/routing-policy.html&quot;&gt;(참고)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Kubernetes에서 NodePort를 사용 할 경우 사용가능한 Port Range는 &lt;code class=&quot;highlighter-rouge&quot;&gt;30000-32767&lt;/code&gt; 입니다.(Radius의 기본 Port번호 사용 불가)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;4-freeradius-설정-및-docker-image-생성&quot;&gt;4. FreeRADIUS 설정 및 Docker Image 생성&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/freeradius/freeradius-server/&quot;&gt;Docker Hub에 공개되어 있는 이미지&lt;/a&gt;를 그대로 이용하면 좋지만… 기본 이미지는 &lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;을 지원하지 않습니다.&lt;/li&gt;
  &lt;li&gt;저는 Python 모듈에서 암복호화 기능도 사용할 예정이므로 &lt;a href=&quot;https://pypi.org/project/pycrypto/&quot;&gt;pycrypto&lt;/a&gt;도 필요합니다.&lt;/li&gt;
  &lt;li&gt;FreeRADIUS 설정 파일들은 굳이 Docker Image에 넣지 않고 실행시 mount 해도 상관없습니다만, 저는 Docker Image에 설정파일을 수정해서 포함 시켰습니다.&lt;/li&gt;
  &lt;li&gt;FreeRADIUS에서 사용 할 인증서 파일도 생성해서 이미지에 포함시킵니다.(이것도.. 실행시 mount 해도 무방합니다.)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;5-freeradius를-기반으로-커스텀-docker-image-만들기&quot;&gt;5. FreeRADIUS를 기반으로 커스텀 Docker Image 만들기&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;step1. 설정 디렉토리 가져오기.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;먼저 &lt;a href=&quot;https://hub.docker.com/r/freeradius/freeradius-server/&quot;&gt;Docker Hub에 공개되어 있는 이미지&lt;/a&gt;를 실행시킨 후 설정 디렉토리(&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/freeradius&lt;/code&gt;)를 추출 합니다.&lt;/li&gt;
  &lt;li&gt;추출한 설정 파일을 적절히 수정하고, 수정한 파일을 적용해서 Docker Image를 새롭게 생성할 예정입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; freeradius-server freeradius/freeradius-server
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;freeradius-server:/etc/freeradius freeradius-config
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;kill &lt;/span&gt;freeradius-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;설정 디렉토리 구조(수정 불필요한 파일은 생략..)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── certs
│   ├── Makefile
│   ├── README
│   ├── ca.cnf
│   ├── client.cnf
│   ├── dh
│   ├── inner-server.cnf
│   ├── passwords.mk
│   └── server.cnf
├── clients.conf
├── mods-available
│   ├── ...
│   └── python
├── mods-config
│   └── python
│       ├── example.py
│       └── radiusd.py
├── mods-enabled
│   ├── ...
│   └── utf8
├── radiusd.conf
├── sites-enabled
│   ├── default
│   └── inner-tunnel
├── templates.conf
├── trigger.conf
└── users
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;step 2. 인증서 생성(Wifi 인증)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl&lt;/code&gt;이 설치되어 있어야 합니다.&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://macnews.tistory.com/4243&quot;&gt;make 설치&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://egloos.zum.com/popfly/v/6035802&quot;&gt;openssl 설치&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Wifi 인증&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;EAP-TLS&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;EAP-TTLS&lt;/code&gt; 등을 사용해야 할 경우 필요합니다. 아닐 경우 다음 단게로…&lt;/li&gt;
  &lt;li&gt;추출한 설정 디렉토리중 &lt;a href=&quot;https://github.com/redBorder/freeradius/blob/master/raddb/certs/README&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;certs/README&lt;/code&gt;&lt;/a&gt;를 참조해서 진행합니다.&lt;/li&gt;
  &lt;li&gt;추가로 &lt;a href=&quot;https://wiki.alpinelinux.org/wiki/FreeRadius_EAP-TLS_configuration&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;이곳&lt;/code&gt;&lt;/a&gt;도 참조하시면 좋습니다.&lt;/li&gt;
  &lt;li&gt;먼저 기존 파일을 제거합니다. (&lt;code class=&quot;highlighter-rouge&quot;&gt;아래 작업들은 cert 디렉토리에서 수행합니다.&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.pem &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.der &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.csr &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.crt &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.key &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.p12 serial&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; index.txt&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ca.cnf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;server.cnf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;client.cnf&lt;/code&gt;를 열고 수정합니다.(저는 아래 항목들을 수정했습니다.)
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;default_days&lt;/code&gt;: 인증서 유효기간&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;countryName ~ commonName&lt;/code&gt;: 인증서에 포함시킬 정보&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;input_password &amp;amp; output_password&lt;/code&gt;: 인증서 암호&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make ca.pem
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make ca.der
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make server.pem
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make server.csr
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;make client.pem
  &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;openssl dhparam &lt;span class=&quot;nt&quot;&gt;-check&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-text&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-5&lt;/span&gt; 4096 &lt;span class=&quot;nt&quot;&gt;-out&lt;/span&gt; dh   &lt;span class=&quot;c&quot;&gt;# 오래 걸릴 수 있음... 몇분~몇십분&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;step 3. FreeRADIUS 기본 설정&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;...&lt;/code&gt; 부분은 기본 설정 유지한 부분.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;client.conf&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SHARED_SECRET&lt;/code&gt; 실행시 환경변수로 지정합니다.
        &lt;ul&gt;
          &lt;li&gt;RADIUS 프로토콜에서 attribute를 암/복호화 할때 사용합니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt; {
  &lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt; = $&lt;span class=&quot;n&quot;&gt;ENV&lt;/span&gt;{&lt;span class=&quot;n&quot;&gt;SHARED_SECRET&lt;/span&gt;}
  &lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sites-enabled/default&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;기본 리퀘스트 처리를 위한 설정입니다.&lt;/li&gt;
      &lt;li&gt;eap 처리 설정 + authorize와 authenticate 단계에서 python 모듈을 사용하도록 추가합니다.&lt;/li&gt;
      &lt;li&gt;authorize 단계에서 실행된 python script에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;Auth-Type=KEYCLOAK&lt;/code&gt;를 설정 할 예정입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt; {

    &lt;span class=&quot;n&quot;&gt;authorize&lt;/span&gt; {
        &lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;eap&lt;/span&gt; {
            &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;updated&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;return&lt;/span&gt;
        }
        &lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;
    }

    &lt;span class=&quot;n&quot;&gt;authenticate&lt;/span&gt; {
        &lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;Auth&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KEYCLOAK&lt;/span&gt; {
            &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;
        }
        &lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;eap&lt;/span&gt;
    }
    
&lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sites-enabled/inner-tunnel&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mods-enabled/eap&lt;/code&gt;에서 EAP-TTLS의 &lt;code class=&quot;highlighter-rouge&quot;&gt;virtual-server&lt;/code&gt;로 inner-tunnel이 설정 됩니다.&lt;/li&gt;
      &lt;li&gt;들어온 RADIUS요청이 EAP-TTLS일 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;sites-enabled/default&lt;/code&gt;에서 eap 관련 처리가 되고 inner-tunnel로 전달 됩니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;tunnel&lt;/span&gt; {
    &lt;span class=&quot;n&quot;&gt;authorize&lt;/span&gt; {
        &lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;pap&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;
    }

    &lt;span class=&quot;n&quot;&gt;authenticate&lt;/span&gt; {
        &lt;span class=&quot;n&quot;&gt;Auth&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KEYCLOAK&lt;/span&gt; {
            &lt;span class=&quot;n&quot;&gt;python&lt;/span&gt;
        }
        &lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;eap&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mods-enabled/eap&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;default_eap_type&lt;/code&gt;은 &lt;code class=&quot;highlighter-rouge&quot;&gt;ttls(EAP-TTLS)&lt;/code&gt;로 지정 합니다.&lt;/li&gt;
      &lt;li&gt;tls, ttls 관련 설정을 빼고 다른 EAP Type 들은 주석처리 합니다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;private_key_password&lt;/code&gt;는 인증서 생성시에 만들때 쓴 암호 입력를 입력합니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;eap&lt;/span&gt; {
  &lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;	&lt;span class=&quot;n&quot;&gt;default_eap_type&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;ttls&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ignore_unknown_eap_types&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;

	&lt;span class=&quot;c&quot;&gt;#md5 {
&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;#}
&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;#pwd {
&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;#}
&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;#leap {
&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;#}
&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;#gtc {
&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;#}
&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;common&lt;/span&gt; {
		&lt;span class=&quot;n&quot;&gt;private_key_password&lt;/span&gt; = &amp;lt;&lt;span class=&quot;n&quot;&gt;private_key_password&lt;/span&gt;&amp;gt;
      &lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;	}


	&lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt; {
    &lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;common&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;	}

	&lt;span class=&quot;n&quot;&gt;ttls&lt;/span&gt; {
    &lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;tls&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;common&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;		&lt;span class=&quot;n&quot;&gt;virtual_server&lt;/span&gt; = &lt;span class=&quot;s2&quot;&gt;&quot;inner-tunnel&quot;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;	}

	&lt;span class=&quot;c&quot;&gt;#peap {
&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;#}
&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;#mschapv2 {
&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;#}
&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;#fast {
&lt;/span&gt;	&lt;span class=&quot;c&quot;&gt;#}
&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mods-enabled/python&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;python 모듈 실행 설정 입니다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;python_path&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;로 구분해서 참조 할 모듈의 path를 지정&lt;/li&gt;
      &lt;li&gt;command line에서 python을 실행하는 경우 기본 python module 및 추가 설치된 module 들의 path가 기본 설정된 채로 실행되지만 FreeRADIUS에서 python을 실행해 줄때는 그렇지 않으므로 스크립트에서 사용 할(import 하는..) 모듈 들이 있는 path를 추가해 주어야함.&lt;/li&gt;
      &lt;li&gt;Dockerfile에서 이미지 생성시 추가하는 모듈들의 docker image 내 경로를 확인해서 추가해 주어야 합니다.&lt;/li&gt;
      &lt;li&gt;아래는 &lt;code class=&quot;highlighter-rouge&quot;&gt;pycrypto&lt;/code&gt;가 설치된 경로를 추가한 설정입니다. (아래 Docker file 참조)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;python&lt;/span&gt; {
	&lt;span class=&quot;n&quot;&gt;python_path&lt;/span&gt;=&lt;span class=&quot;s2&quot;&gt;&quot;/usr/lib/python2.7/:/usr/local/lib/python2.7/dist-packages:${modconfdir}/python/:/usr/lib/python2.7/lib-dynload/&quot;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;keycloak&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pass_all_vps&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;pass_all_vps_dict&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;mod_authorize&lt;/span&gt; = ${.&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;}
	&lt;span class=&quot;n&quot;&gt;func_authorize&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;authorize&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;mod_authenticate&lt;/span&gt; = ${.&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;}
	&lt;span class=&quot;n&quot;&gt;func_authenticate&lt;/span&gt; = &lt;span class=&quot;n&quot;&gt;authenticate&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;# ... 
&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mods-config/python/keycloak.py&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;원래 해당 디렉토리에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;radiusd.py&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;example.py&lt;/code&gt; 두개 파일이 있습니다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;radiusd.py&lt;/code&gt;는 반환값 상수 및 로그 출력을 위한 함수가 선언되어 있습니다.(&lt;strong&gt;자동생성된 파일로 수정해도 의미가 없습니다.&lt;/strong&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;example.py&lt;/code&gt; -&amp;gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;keycloak.py&lt;/code&gt;로 변경(위 mods-enabled/python 파일에서도 module 명을 미리 변경했습니다.)&lt;/li&gt;
      &lt;li&gt;각 단계별 함수에 넘어오는 &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;tuple&lt;/code&gt;이며, 일반적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;(('User-Name', 'dorma'), ('User-Password', 'password'), ('NAS-Identifier', 'client-identifier'), ...)&lt;/code&gt;으로 전달 됩니다.&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;인증 방식이 &lt;code class=&quot;highlighter-rouge&quot;&gt;PAP&lt;/code&gt;가 아닐 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;User-Password&lt;/code&gt;는 전달되지 않습니다.&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;authorize&lt;/code&gt;단계에서는 username / password가 있는 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;Auth-Type=KEYCLOAK&lt;/code&gt;으로 설정하며, &lt;code class=&quot;highlighter-rouge&quot;&gt;authenticate&lt;/code&gt;단계에서 실제 인증을 처리 합니다.
        &lt;ul&gt;
          &lt;li&gt;sites-enabled 설정의 authenticate에서 Auth-Type 분기처리가 되어있어서 username / password가 없으면 authenticate 함수는 호출되지 않습니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;실제 인증처리 로직은 &lt;a href=&quot;https://www.keycloak.org/docs-api/6.0/rest-api/index.html&quot;&gt;keycloak API&lt;/a&gt; 참고 하셔서 구현하시면 됩니다.
        &lt;ul&gt;
          &lt;li&gt;꼭 keycloak과 연동 안하고 python으로 어떤 처리든 하고 결과만 반환하면 되니 원하는 서버 혹은 DB 베이스로 인증처리를 하시면 됩니다.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#! /usr/bin/env python2
&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;radiusd&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authorize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getUserName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getUserPassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tuple로 반환시 `인증결과, response, FreeRADIUS 내부 처리 변수` 순으로 반환 가능
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;radiusd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RLM_MODULE_UPDATED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Auth-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;KEYCLOAK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 처리 결과 반환
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RLM_MODULE_REJECT&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;authenticate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getUserName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getUserPassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nasId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getNasIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;# ...&amp;lt;인증 처리&amp;gt;...
&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radiusd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RLM_MODULE_OK&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radiusd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RLM_MODULE_REJECT&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getNasIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NAS-Identifier&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;User-Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserPassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;User-Password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;step 4. Docker Image 생성&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/freeradius/freeradius-server/&quot;&gt;Docker Hub에 공개되어 있는 이미지&lt;/a&gt;를 베이스
    &lt;ol&gt;
      &lt;li&gt;python 설치&lt;/li&gt;
      &lt;li&gt;python 추가 모듈 설치(아래 예시는 &lt;a href=&quot;https://pypi.org/project/pycrypto/&quot;&gt;pycrypto&lt;/a&gt;, pycrypto는 설치시 빌드가 필요해서 build-essential도 설치했다가 설치 후 제거)&lt;/li&gt;
      &lt;li&gt;위에서 수정한 설정파일들을 설정 디렉토리(&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/raddb&lt;/code&gt;) 아래에 덮어쓰기&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; freeradius/freeradius-server:3.0.17&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  apt-get update &lt;span class=&quot;nt&quot;&gt;--force-yes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--force-yes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; python python-dev curl build-essential

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; pycrypto-2.6.1.tar.gz https://ftp.dlitz.net/pub/dlitz/crypto/pycrypto/pycrypto-2.6.1.tar.gz
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-xzf&lt;/span&gt; pycrypto-2.6.1.tar.gz
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; pycrypto-2.6.1.tar.gz
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /pycrypto-2.6.1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;python setup.py &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; pycrypto-2.6.1

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get remove &lt;span class=&quot;nt&quot;&gt;--force-yes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--auto-remove&lt;/span&gt; build-essential
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get purge &lt;span class=&quot;nt&quot;&gt;--force-yes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--auto-remove&lt;/span&gt; build-essential

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ./freeradius-config/radiusd.conf /etc/raddb/radiusd.conf&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ./freeradius-config/clients.conf /etc/raddb/clients.conf&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ./freeradius-config/sites-enabled/default /etc/raddb/sites-enabled/default&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ./freeradius-config/sites-enabled/inner-tunnel /etc/raddb/sites-enabled/inner-tunnel&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ./freeradius-config/mods-enabled/eap /etc/raddb/mods-enabled/eap&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ./freeradius-config/mods-enabled/python /etc/raddb/mods-enabled/python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ./freeradius-config/certs /etc/raddb/certs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ./freeradius-config/mods-config/python /etc/raddb/mods-config/python&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /etc/raddb/mods-config/python&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.pyc

&lt;span class=&quot;k&quot;&gt;WORKDIR&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; /&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;docker build &amp;amp; push&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; socar/radius-server:0.9.1 &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker push &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; socar/radius-server:0.9.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;설치&quot;&gt;설치&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; 예시&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;radius-server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;free-radius-server&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;socarr/radius-server:0.9.1&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;env_file&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./config.env&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;31812:1812/udp&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;31813:1813/udp&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[]&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#- ./logs:/var/log/freeradius&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;config.env&lt;/code&gt; 예시&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;SHARED_SECRET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;my-shared-secret&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;설치 (docker-compose.yml, config.env가 있는 경로에서 실행)&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;keycloak-유저로-ssh-로그인-하기&quot;&gt;Keycloak 유저로 ssh 로그인 하기&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Ubuntu Linux&lt;/code&gt; 기준으로 설정을 진행합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h5 id=&quot;1-구성도&quot;&gt;1. 구성도&lt;/h5&gt;
&lt;div class=&quot;mermaid&quot;&gt;
graph TD;
  subgraph Linux
    CLIENT[시작: ssh/sudo] --&amp;gt;|1. PAM 모듈 호출| PAM(pam_radius_auth.so)
    PAM --&amp;gt;|6. 인증 완료| CLIENT
  end
  
  subgraph Radius-Server
    PAM --&amp;gt; |2. RADIUS 요청| RADIUS_SERVER
  end

  subgraph Keycloak
    RADIUS_SERVER --&amp;gt;|3. 권한확인 요청| KEYCLOAK[Keycloak]
    KEYCLOAK --&amp;gt;|4. 권한확인 응답| RADIUS_SERVER
  end
  
  RADIUS_SERVER --&amp;gt;|5. RADIUS 응답| PAM
&lt;/div&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;2-pam_radius_authso-빌드-하기&quot;&gt;2. &lt;a href=&quot;https://github.com/FreeRADIUS/pam_radius&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pam_radius_auth.so&lt;/code&gt;&lt;/a&gt; 빌드 하기&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;저는 Mac을 사용하므로 ubuntu docker 이미지를 사용해서 빌드합니다.&lt;/li&gt;
  &lt;li&gt;다운로드 혹은 clone 받은 소스 디렉토리에서 진행 합니다.&lt;/li&gt;
  &lt;li&gt;빌드용 이미지 생성을 위한 Dockerfile&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; ubuntu&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  apt-get update &lt;span class=&quot;nt&quot;&gt;--force-yes&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\
&lt;/span&gt;  apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--yes&lt;/span&gt; build-essential libpam0g-dev make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;docker build&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; pam_builder &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;docker run&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;:/pam_radius &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /pam_radius pam_builder ./configure
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;:/pam_radius &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; /pam_radius pam_builder make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;빌드가 완료되면 &lt;code class=&quot;highlighter-rouge&quot;&gt;pam_radius_auth.so&lt;/code&gt;파일이 생성됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;3-pam_radius_authso-업로드-하기&quot;&gt;3. &lt;code class=&quot;highlighter-rouge&quot;&gt;pam_radius_auth.so&lt;/code&gt; 업로드 하기&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;저는 ubuntu 서버에 업로드 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;/opt/pam/pam_radius_auth.so&lt;/code&gt; 경로에 위치 시켰습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;4-pam_radius_authso-설정하기&quot;&gt;4. &lt;code class=&quot;highlighter-rouge&quot;&gt;pam_radius_auth.so&lt;/code&gt; 설정하기&lt;/h5&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/raddb/server&lt;/code&gt; 파일 생성
    - 소스상의 &lt;a href=&quot;https://github.com/FreeRADIUS/pam_radius/blob/master/pam_radius_auth.conf&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pam_radius_auth.conf&lt;/code&gt;&lt;/a&gt; 파일 참조.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;span class=&quot;c&quot;&gt;# server[:port]             shared_secret      timeout (s)  source_ip            vrf&lt;/span&gt;
&amp;lt;radius-server&amp;gt;:&amp;lt;auth-port&amp;gt;	     &amp;lt;shared_secret&amp;gt;		&amp;lt;&lt;span class=&quot;nb&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h5 id=&quot;5-sshd-설정&quot;&gt;5. &lt;code class=&quot;highlighter-rouge&quot;&gt;sshd&lt;/code&gt; 설정&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/FreeRADIUS/pam_radius/blob/master/USAGE&quot;&gt;pam_radius_auth.so 설정 옵션&lt;/a&gt; 참고&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/pam.d/sshd&lt;/code&gt; 설정.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@include common-auth&lt;/code&gt;을 남겨두고. pam_radius_auth.so의 pam option을 &lt;code class=&quot;highlighter-rouge&quot;&gt;[default=ignore]&lt;/code&gt;로 설정 하면 pam_radius_auth.so를 이용한 인증이 실패 할 경우 기본 linux 사용자 인증 방식으로 인증 가능합니다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;client_id&lt;/code&gt;는 RADIUS서버로 전달 될때 &lt;code class=&quot;highlighter-rouge&quot;&gt;NAS-Identifier&lt;/code&gt;로 전달되니 여러대의 서버에 설정 할 경우 서버 및 ssh, sudo를 구분 할 수 있는 값을 사용하면 됩니다.(&lt;a href=&quot;/posts/keycloak-radius&quot;&gt;RADIUS 서버 설치 및 Keycloak 연동 설정&lt;/a&gt;의 python 모듈에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;NAS-Identifier&lt;/code&gt; 값으로 분기처리 가능.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ...
# Standard Un*x authentication.
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt;]	/&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;pam&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;pam_radius_auth&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_id&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;-&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;13&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;179&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;force_prompt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prompt_attribute&lt;/span&gt;
@&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;common&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; 기본 설정.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PasswordAuthentication no&lt;/code&gt; 설정시 sshd에서 기본으로 출력하는 비밀번호를 묻는 prompt를 노출하지 않습니다.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ChallengeResponseAuthentication yes&lt;/code&gt; 설정시 PAM 모듈에서 사용자에게 노출 할 prompt 메세지를 핸들링 할 수 있습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PasswordAuthentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ChallengeResponseAuthentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(선택사항)&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; 추가설정
    &lt;ul&gt;
      &lt;li&gt;특정 사용자(keycloak / radius-server 접속 불가시 사용)를 제외하고 RSA key를 이용한 로그인을 막고 싶은 경우.&lt;/li&gt;
      &lt;li&gt;아래 예시와 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;AuthorizedKeysFile&lt;/code&gt;를 절대경로로 지정.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;AuthorizedKeysFile&lt;/span&gt;	/&lt;span class=&quot;n&quot;&gt;home&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;dorma&lt;/span&gt;/.&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;authorized_keys&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h5 id=&quot;6-sudo-설정&quot;&gt;6. &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; 설정&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/pam.d/sudo&lt;/code&gt; 설정.
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@include common-auth&lt;/code&gt;을 남겨두고. pam_radius_auth.so의 pam option을 &lt;code class=&quot;highlighter-rouge&quot;&gt;[default=ignore]&lt;/code&gt;로 설정 하면 pam_radius_auth.so를 이용한 인증이 실패 할 경우 기본 linux 사용자 인증 방식으로 인증 가능.&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;client_id&lt;/code&gt;는 RADIUS서버로 전달 될때 &lt;code class=&quot;highlighter-rouge&quot;&gt;NAS-Identifier&lt;/code&gt;로 전달되니 여러대의 서버에 설정 할 경우 서버 및 ssh, sudo를 구분 할 수 있는 값을 사용하면 됩니다.(&lt;a href=&quot;/posts/keycloak-radius&quot;&gt;RADIUS 서버 설치 및 Keycloak 연동 설정&lt;/a&gt;의 python 모듈에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;NAS-Identifier&lt;/code&gt; 값으로 분기처리 가능.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-conf highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; [&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt;] /&lt;span class=&quot;n&quot;&gt;opt&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;pam&lt;/span&gt;/&lt;span class=&quot;n&quot;&gt;pam_radius_auth&lt;/span&gt;.&lt;span class=&quot;n&quot;&gt;so&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client_id&lt;/span&gt;=&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt;-&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;13&lt;/span&gt;.&lt;span class=&quot;m&quot;&gt;179&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;force_prompt&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prompt_attribute&lt;/span&gt;
@&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;common&lt;/span&gt;-&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;cisco-무선-공유기-설정&quot;&gt;Cisco 무선 공유기 설정&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;`무선 공유기에서 RADIUS 서버와 연동 설정을 하고 SSID를 띄웁니다.
    &lt;ul&gt;
      &lt;li&gt;&lt;del&gt;자세한 설정은 네트워크 관리자에게 문의하세요?!&lt;/del&gt;&lt;/li&gt;
      &lt;li&gt;참고: &lt;a href=&quot;https://www.cisco.com/c/en/us/support/docs/wireless-mobility/wireless-lan-wlan/211263-Configure-802-1x-PEAP-with-FreeRadius.html&quot;&gt;Cisco 라우터에서 FreeRADIUS 연동 설정 하기&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;정리--추가로-가능한-것&quot;&gt;정리 + 추가로 가능한 것&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Keycloak + FreeRADIUS + pam_radius_auth.so + keycloak API로 인증처리 python 스크립트 작성&lt;/code&gt;으로 web, wifi, ssh 인증을 &lt;code class=&quot;highlighter-rouge&quot;&gt;1개의 ID로 각종 사내 서비스 인증&lt;/code&gt;을 구축 과정을 정리해 보았습니다.
    &lt;ul&gt;
      &lt;li&gt;사실 &lt;code class=&quot;highlighter-rouge&quot;&gt;설치 및 설정&lt;/code&gt;이 과정의 대부분이고 개발(코드작성)은 &lt;code class=&quot;highlighter-rouge&quot;&gt;python 스크립트 100~200줄 정도&lt;/code&gt;하였습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;wifi나 ssh 인증 같은 경우 패스워드를 공유해서 사용하는 경우 보안의 구멍이 될 수 있습니다. 보완책으로 패스워드를 주기적으로 변경하는 방법을 사용하는데 wifi의 경우 크게 문제가 되지 않지만 ssh 인증 같은 경우는 서버 대수가 늘어나면 주기적인 변경이 쉽지 않습니다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;위 설정의 경우 ssh 접속전에 서버별로 계정은 미리 생성이 되어있어야 접속이 가능&lt;/strong&gt; 하지만 이후 패스워드 변경 등은 개별 사용자별로 관리가 가능합니다.&lt;/li&gt;
  &lt;li&gt;위에서는 자세히 설명하지는 않았지만 keycloak의 권한관리(authorization)를 잘 설정하고 python 스크립트에서 인증 + 권한확인을 처리하게 되면 &lt;strong&gt;개별 사용자별로 특정 서버에 대한 접근을 허용할지에 대한 관리도 가능&lt;/strong&gt;해집니다.&lt;/li&gt;
  &lt;li&gt;그 밖에도 &lt;a href=&quot;https://github.com/keycloak/keycloak-gatekeeper&quot;&gt;keycloak-gatekeeper&lt;/a&gt;를 잘 활용하면 API서버에서는 인증/권한 관련 코드를 한줄도 작성하지 않고 기능만 작성한 후에 gatekeeper를 활용해 url / http method 별로 접근 권한 처리도 할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>dorma</name></author><category term="security" /><category term="keycloak" /><category term="sso" /><summary type="html">Photo by Zhen Hu on Unsplash</summary></entry></feed>